@{
    ViewData["Title"] = "Dashboard - Analytics";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <!-- Bootstrap JS (for dropdowns) -->
}

@section PageScripts {
    <script src="~/js/dashboards-analytics.js"></script>
}

<div class="row mt-4">
    <div class="col-lg-12">
        <div class="card p-0">
            <div class="card-body p-1">
                <div id="customerList">

                    <div class="container mt-5 d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Orders Received With Delivery</h4>
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary btn-sm" id="Btn_OrderCompleteId">
                                <i class="fa fa-check"></i> Complete Order
                            </button>
                            <button type="button" class="btn btn-primary pe-4" id="Btn_FilterCityId" data-bs-toggle="modal" data-bs-target="#filterModal">
                                <img src="~/svg/icons/filtercheck.svg" id="filtercheck" class="me-2 d-none" />
                                <img src="~/svg/icons/filtercross.svg" id="filtercross" class="me-2" /> Filter
                            </button>
                        </div>
                    </div>


                    <!-- Tab content -->
                    <div class="tab-content" id="myTabContent">
                        <div class="table-responsive table-card mt-3 mb-1">
                            <table class="table align-middle table-nowrap" id="OrderReceivedWithDeliveryTableId">
                                <thead class="table-light">
                                    <tr>
                                        <th class="sort fw-bold">
                                            <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllOrders" />
                                        </th>
                                        <th>Sr. No.</th>
                                        <th class="sort fw-bold" data-sort="action">Action</th>
                                        <th class="sort fw-bold">Order Status</th>
                                        <th class="sort fw-bold">Order Number</th>
                                        <th class="sort fw-bold">Item Name</th>
                                        <th class="sort fw-bold">Category Name</th>
                                        <th class="sort fw-bold">Gross Weight</th>
                                        <th class="sort fw-bold">Net Weight</th>
                                        <th class="sort fw-bold">Purity</th>
                                        <th class="sort fw-bold">Pcs</th>
                                        <th class="sort fw-bold">Product Group Name</th>
                                        <th class="sort fw-bold">Branch Name</th>
                                        <th class="sort fw-bold">Order Date</th>
                                        <th class="sort fw-bold">Order Delivery Date</th>
                                        <th class="sort fw-bold">Vendor Name</th>
                                    </tr>
                                </thead>
                                <tbody class="form-check-all">
                                </tbody>
                            </table>
                        </div>
                        @await Html.PartialAsync("Sections/Menu/_pagination")
                    </div>
                </div>
            </div><!-- end card -->
        </div>
        <!-- end col -->
    </div>
    <!-- end col -->
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    function loadPageData(page, rowsToShow) {
        GetOrderDate(page, $('#ShowRowid').val());
    }

    // Function to update the Select All checkbox state based on individual checkbox selections
    function updateSelectAllCheckboxState() {
        var table = $("#OrderReceivedWithDeliveryTableId");
        var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
        table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
    }

    var selectedRowIds = [];

    //this IS USED FOR HO CREATE ORDER COMPLETED
    $("#Btn_OrderCompleteId").click(function ()
    {
      if(selectedRowIds.length > 0)
      {
        $.ajax({
                type: "POST",
                url: "/Dashboard/OrderCreatedByChecked",
                data:
                {
                    selectedRowIds : selectedRowIds.join(", ")
                },
                success: function (data) {
                    var Result = JSON.parse(data);
                    //alert(Result)
                    //THIS IS USED FOR NO EXTEND ORDER SELECT DATE
                    if (Result == 0)
                    {
                        $.ajax({
                          type: "POST",
                          url: "/Dashboard/OrderCompletedByHO",
                          data: {
                              OrderItemIds:selectedRowIds.join(", ")
                          },
                          success: function (data)
                          {
                            ShowErrorMsg("Order Completed...!!");
                            setTimeout(() => {
                              window.location.href = '/Dashboard/OrderReceivedWithDelivery';
                            }, 2000); // 3000 milliseconds = 3 seconds

                          },
                          error: function (response) {

                          }
                      });
                    }
                    else {
                        ShowPromptAlert("Please Check Some Order's Created By Store...!! \n Do You Want To Continue Without that Order's...!!")
                    }
                },
                error: function (response) {

                }
            });
      }
      else{
        WarningMessage("Please Select Orders...!!")
      }
    });

    // THIS FUNCTION IS USED TO SHOW PROMPT ALERT WITH YES/NO
    function ShowPromptAlert(message, callbackYes, callbackNo) {
        Swal.fire({
            text: message,
            icon: "question",
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light',
                cancelButton: 'btn btn-secondary waves-effect waves-light'
            },
            buttonsStyling: false
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/Dashboard/OrderCompletedByHO",
                    data: {
                        OrderItemIds:selectedRowIds.join(", ")
                    },
                    success: function (data) {
                       ShowErrorMsg("Order Completed...!!");
                            setTimeout(() => {
                              window.location.href = '/Dashboard/OrderReceivedWithDelivery';
                            }, 2000); // 3000 milliseconds = 3 seconds
                    },
                    error: function (response) {

                    }
                });
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                // If "No" is clicked
                if (callbackNo) callbackNo();
            }
        });
    }

    function OpenPopupForViewDeliveryChallan(ItemDetailsId) {
        $.ajax({
            type: "POST",
            url: "/Dashboard/GetDeliveryChallanPath",
            data: {
                ItemDetailsId: ItemDetailsId,
            },
            success: function (data) {
                var res = JSON.parse(data);
                var Path = res["DeliveryChallan"][0]["challan_pdf_path"]; // Ensure 'res' contains 'DeliveryChallan' and 'url'

                // Log the Path to check its structure
                console.log(Path);

                // Empty the current content of the modal attachment container
                $("#AttachId").empty();

                // Append the PDF directly inside the modal using an iframe
                $("#AttachId").append(`
                                            <div class="col-md-12">
                                              <iframe src="`+ Path + `" width="100%" height="600px" style="border: none;"></iframe>
                                            </div>
                                      `);

                // Display the modal
                $("#attachmentView").modal('show');
            },
            error: function (response) {

            }
        });
    }

    // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowErrorMsg(message) {
        //alert(message)
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: "success",
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });
    }

    function WarningMessage(message) {
        //alert(message)
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: "warning",
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });
    }

    function applyFilter() {

        var orderDateFrom = $("#filterOrderDateFrom").val();
        var orderDateTo = $("#filterOrderDateTo").val();
        var deliveryDateFrom = $("#filterDeliveryDateFrom").val();
        var deliveryDateTo = $("#filterDeliveryDateTo").val();

        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();

        var valid = true;

        if (orderDateFrom || orderDateTo) {
            if (!orderDateFrom) {
                $("#WarnfilterOrderDateFrom").show();
                valid = false;
            }
            if (!orderDateTo) {
                $("#WarnfilterOrderDateTo").show();
                valid = false;
            }
        }

        if (deliveryDateFrom || deliveryDateTo) {
            if (!deliveryDateFrom) {
                $("#WarnfilterDeliveryDateFrom").show();
                valid = false;
            }
            if (!deliveryDateTo) {
                $("#WarnfilterDeliveryDateTo").show();
                valid = false;
            }
        }

        if (!valid) {
            return;
        }

        $('#filtercheck').removeClass('d-none');
        $('#filtercross').addClass('d-none');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filterModal').modal('hide');
    }

    function ClearFilter() {
        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();
        $('#filterCustomerMobile').val('');
        $('#filterItemName').val("")
        $('#filterCategory').val('')
        $('#filterVendorName').val('');
        $('#filterOrderDateFrom').val('');
        $('#filterCustomerName').val('');
        $('#filterBranchName').val('');
        $('#filterOrderNo').val('');
        $('#filterOrderDateTo').val('');
        $('#filterDeliveryDateFrom').val('');
        $('#filterDeliveryDateTo').val('');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filtercheck').addClass('d-none');
        $('#filtercross').removeClass('d-none');
    };

    function GetOrderDate(pageNumber, pageSize) {
        const data = {
            CustomerMobile: $('#filterCustomerMobile').val() || '',
            ItemName: $('#filterItemName').val() || '',
            Category: $('#filterCategory').val() || '',
            VendorName: $('#filterVendorName').val() || '',
            CustomerName: $('#filterCustomerName').val() || '',
            BranchName: $('#filterBranchName').val() || '',
            OrderDateFrom: $('#filterOrderDateFrom').val() || '',
            OrderNo: $('#filterOrderNo').val() || '',
            OrderDateTo: $('#filterOrderDateTo').val() || '',
            DeliveryDateFrom: $('#filterDeliveryDateFrom').val() || '',
            DeliveryDateTo: $('#filterDeliveryDateTo').val() || '',
            PageNumber: pageNumber,
            PageSize: pageSize
        };

        $.ajax({
            type: "POST",
            url: "/Dashboard/OrderReceivedWithDeliveryFilter",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (data) {
                var res = JSON.parse(data);
                TableBindData(res)
            },
            error: function (response) {

            }
        });
    }

    function TableBindData(res) {
        // Clear the tbody of the table
        $("#OrderReceivedWithDeliveryTableId tbody").empty();

        var table = $("#OrderReceivedWithDeliveryTableId");

        table.find(".Checkbox_SelectAllHeader").prop('checked', false);

        const paginationInfo = res.PaginationInfo;

        let srno;

        if (res && paginationInfo && paginationInfo.length > 0) {
            const totalRows = paginationInfo[0].TotalRows;
            const totalPages = paginationInfo[0].TotalPages;
            const pageNumber = paginationInfo[0].PageNumber;
            const pageSize = paginationInfo[0].PageSize;
            srno = (pageNumber - 1) * pageSize + 1;

            generatePagination(totalPages, pageNumber);
        } else {
            console.error('PaginationInfo is not available or is in an incorrect format. Response:', paginationInfo);
        }

        // Check if the response has valid data
        if (res && res.OrderData && Array.isArray(res.OrderData)) {
            // Iterate through each order data
            for (let i = 0; i < res["OrderData"].length; i++) {
                // Get the current order data
                let orderItemId = res["OrderData"][i]["order_item_id"] || '';
                let orderStatus = res["OrderData"][i]["order_status"] || '';
                let orderDate = res["OrderData"][i]["order_date"] ? res["OrderData"][i]["order_date"].split('T')[0] : '';
                let orderDeliveryDate = res["OrderData"][i]["order_delivery_date"] ? res["OrderData"][i]["order_delivery_date"].split('T')[0] : '';

                let LinkData = "";
                // Define the edit button logic based on order status

                if (parseFloat(res["OrderData"][i]["gross_wt"]) > parseFloat(res["OrderData"][i]["net_wt"])) {
                    LinkData += `
                        <a href="javascript:void(0);" class="text-primary cursor-pointer" onclick="ShowStoneDetails(${res["OrderData"][i]["order_item_id"]})">
                            <i class="fa fa-gem"></i>
                        </a>`;
                } else {
                    LinkData += `<span>-</span>`;
                }

                LinkData += `
                    <span class="text-primary cursor-pointer ms-3" data-bs-toggle="dropdown">
                        <i class="fa fa-ellipsis-v" aria-hidden="true"></i>
                    </span>
                    <ul class="dropdown-menu dropdown-menu-end p-0 small">
                        <li>
                            <a class="dropdown-item py-1" href="javascript:void(0);" onclick="OpenPopupForViewDeliveryChallan('${orderItemId}')">
                                <i class="fa fa-id-card me-2"></i>Delivery Challan
                            </a>
                            <hr class="m-0" />
                        </li>
                        <li>
                            <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowJobCardDetails('${orderItemId}')">
                                <i class="fa fa-id-card me-2"></i>Job Card
                            </a>
                            <hr class="m-0" />
                        </li>
                        <li>
                            <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowHistoryPage('${orderItemId}')">
                                <i class="fa fa-history me-2"></i>History
                            </a>
                        </li>
                    </ul>
                `;


                // Safely retrieve values for each column, fallback to '-' if null or undefined
                let orderSeriesNo = res["OrderData"][i]["order_series_no"] || '';
                let itemName = res["OrderData"][i]["item_name"] || '';
                let categoryName = res["OrderData"][i]["category_name"] || '';
                let netWt = parseFloat(res["OrderData"][i]["net_wt"]).toFixed(3) || '';
                let purityName = parseFloat(res["OrderData"][i]["purity_name"]).toFixed(2) || '';
                let pcs = res["OrderData"][i]["pcs"] || '';
                let productGroupName = res["OrderData"][i]["product_group_name"] || '';
                let vendorName = res["OrderData"][i]["vendor_name"] || '';
                let status = res["OrderData"][i]["STATUS"] || '';
                let gross_wt = parseFloat(res["OrderData"][i]["gross_wt"]).toFixed(3) || '';
                let branch_name = res["OrderData"][i]["branch_name"] || '';

                const idCheck = res["OrderData"][i]["order_item_id"] || '';
                // Ensure both idCheck and elements in selectedRowIds are numbers
                const isChecked = selectedRowIds.includes(Number(idCheck));

                // Construct the table row HTML
                const data = `
                            <tr id="${idCheck}">
                                        <td><input type="checkbox" class="form-check-input-sm RowCheckbox" data-id="${orderItemId}" name="OrderDetailsId" value="${orderItemId}" ${isChecked ? 'checked' : ''} /></td>
                                <td>${srno}</td>
                            <td class="sort">
                                ${LinkData}
                            </td>
                            <td>${status}</td>
                            <td>${orderSeriesNo}</td>
                            <td>${itemName}</td>
                            <td>${categoryName}</td>
                            <td>${gross_wt}</td>
                            <td>${netWt}</td>
                            <td>${purityName}</td>
                            <td>${pcs}</td>
                            <td>${productGroupName}</td>
                            <td>${branch_name}</td>
                            <td>${orderDate}</td>
                            <td>${orderDeliveryDate}</td>
                            <td>${vendorName}</td>
                        </tr>`;

                // Append the row to the table body
                $("#OrderReceivedWithDeliveryTableId tbody").append(data);
                srno++;
            }
        } else {
            // If no data is available, display a "No Data Available" row
            $("#OrderReceivedWithDeliveryTableId tbody").empty();
            $("#OrderReceivedWithDeliveryTableId tbody").html(`
                                <tr>
                                    <td colspan="12" style="text-align: center;">No Data Available</td>
                                </tr>
                            `);
            generatePagination(1, 1);
        }
    }

    // Select all checkboxes when 'Select All' is checked, excluding disabled checkboxes
    $(".Checkbox_SelectAllHeader").on("change", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the header checkbox
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

        // Select or deselect all row checkboxes based on the header checkbox state
        table.find(".RowCheckbox").prop('checked', isChecked);

        // Update the selectedRowIds array based on the "Select All" checkbox
        if (isChecked) {
            // Add all row IDs to the selectedRowIds array for the specific table
            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId && !selectedRowIds.includes(rowId)) {
                    selectedRowIds.push(rowId);
                    console.log(selectedRowIds);
                }
            });
        } else {

            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId) {
                    // Only remove the rowId from the selectedRowIds array if the checkbox is unchecked
                    selectedRowIds = selectedRowIds.filter(function (id) {
                        return id !== rowId;
                    });
                }
            });
        }
    });

    $(document).on("change", ".RowCheckbox", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the checkbox
        var rowId = $(this).data('id');  // Get the row ID from data attribute
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox
        // Add or remove the row ID from the selectedRowIds array based on checkbox state
        if (isChecked) {
            if (!selectedRowIds.includes(rowId)) {
                selectedRowIds.push(rowId);
                console.log(selectedRowIds);
            }
        } else {
            var index = selectedRowIds.indexOf(rowId);
            if (index !== -1) {
                selectedRowIds.splice(index, 1);
                console.log(selectedRowIds);
            }
        }

        // Update the "Select All" checkbox state based on whether all checkboxes in the current table are checked
        updateSelectAllCheckboxState();


    });

    $(document).ready(function () {

        GetOrderDate(1, $('#ShowRowid').val());

        $('#applyFiltersButton').on('click', function () {

            applyFilter();

        });

        $("#ClearFiltersButton").click(function () {

            ClearFilter();

        });

    });

</script>
