@{
    ViewData["Title"] = "Dashboard - Analytics";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <!-- Bootstrap JS (for dropdowns) -->
}

@section PageScripts {
    <script src="~/js/dashboards-analytics.js"></script>
}

@if (TempData["EditOrderMessage"] != null)
{
    <script>
        // Safely pass TempData["Message"] to JavaScript
        ShowErrorMsg('@TempData["EditOrderMessage"]');

        // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        function ShowErrorMsg(message) {
            //alert(message)
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });
        }
    </script>
    TempData["EditOrderMessage"] = null;
}

<div class="col-12">
    <div class="d-flex justify-content-between align-items-center">
        <!-- Title and Filter Dropdown -->

    </div>
</div>

<div class="row mt-4">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="listjs-table" id="customerList">
                    <div class="row g-4 mb-3">
                        <!-- First Row: Title and Buttons -->
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center">
                                <!-- Title on the left -->
                                <h4>Vendor Rejected</h4>

                                <!-- Buttons on the right -->
                                <div class="d-flex gap-2">
                                    <button id="Btn_ExportData" class="btn btn-primary" data-bs-toggle="modal" onclick="openModal()">
                                        <i class="ri-user-add-line ri-24px me-2"></i> Re-assign Vendor
                                    </button>

                                    <button class="btn btn-primary" id="Btn_FilterCityId" data-bs-toggle="modal" data-bs-target="#filterModal">
                                        <img src="~/svg/icons/filtercheck.svg" id="filtercheck" class="me-2 d-none" /><img src="~/svg/icons/filtercross.svg" id="filtercross" class="me-2" /> Filter
                                    </button>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive table-card mt-3 mb-1">
                        <table class="table align-middle table-nowrap" id="VendorOrderRejectedTableId">
                            <thead class="table-light">
                            <thead class="table-light">
                                <tr>
                                    <th class="sort fw-bold">
                                        <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllOrders" />
                                    </th>
                                    <th class="sort fw-bold" data-sort="Sr No">Sr No</th>
                                    <th class="sort fw-bold" data-sort="Action">Action</th>
                                    <th class="sort fw-bold" data-sort="Status">Status</th>
                                    <th class="sort fw-bold" data-sort="Order No">Order No.</th>
                                    <th class="sort fw-bold" data-sort="Item Name">Item Name</th>
                                    <th class="sort fw-bold" data-sort="Category">Category</th>
                                    <th class="sort fw-bold" data-sort="">Gross Weight</th>
                                    <th class="sort fw-bold" data-sort="Net Weight">Net Weight</th>
                                    <th class="sort fw-bold" data-sort="Purity">Purity</th>
                                    <th class="sort fw-bold" data-sort="Item Pieces">Item Pieces</th>
                                    <th class="sort fw-bold" data-sort="Product Group">Product Group</th>
                                    <th class="sort fw-bold" data-sort="Branch Name">Branch Name</th>
                                    <th class="sort fw-bold" data-sort="">Order Date</th>
                                    <th class="sort fw-bold" data-sort="">Order Delivery Date</th>
                                    <th class="sort fw-bold" data-sort="">Vendor Name</th>
                                </tr>
                            </thead>
                            <tbody class="form-check-all">
                            </tbody>
                        </table>
                    </div>
                    @await Html.PartialAsync("Sections/Menu/_pagination")
                </div>
            </div><!-- end card -->
        </div>
        <!-- end col -->
    </div>
    <!-- end col -->
</div>

<!-- Modal for Adding Product -->
<div class="modal fade" id="SandToVendorModalViewId" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog" style="margin-top:15%">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Country Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
    @*                 <div class="col">
                        <label>Assign Vendor</label>
                        <select class="form-select" name="VendorName" id="VendorNameId" required>
                            <option value=""> Please Select Vendor </option>
                            @foreach (var item in ViewBag.VendorName)
                            {
                                <option value="@item["id"]">@item["vendor_name"]</option>
                            }
                        </select>
                    </div> *@
					<div class="col">
                        <label>Assign Vendor</label>
						<input type="text" class="form-control" name="VendorName1" id="VendorNameId" placeholder="Type State name..." required />
						<div id="suggestions" class="list-group mt-1"></div>
						<input type="hidden" name="VendorName" id="VendorId" value="" />
                    </div>
                    <input type="hidden" name="SelectedOrderItemId" id="Txt_BindAllItemsId" />
                    <div class="col">
                        <label>Expected Delivery Date</label>
                        <input type="date" class="form-control" name="ExpectedDeliveryDate" id="ExpectedDeliveryDate" required />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" onclick="return ValidateOrderDeliveryDate()">Send To Vendor</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Close</button>
            </div>

        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
		//VINA CODE START FOR SEARCH FUNCTIONALITY
	 let VendorGroupRecords = [];
	 // THIS IS TO VALIDATE CORRECT PRODUCT NAME IS DISPLAY
	// function ValidateData()
	// {
	// 	if($("#ProductGroupId").val() == ""){
	// 		ShowWarning("Enter Valid Product Group...")
	// 		return false;
	// 	}
	// 	else{
	// 		return true;
	// 	}
	// }
	//SEARCH FUNCTION
	$(document).ready(function ()
	{
		//THIS FUNCTION IS USED TO SEARCH ON VENDOR  NAME TYPED
		 $('#VendorNameId').on('keyup', function () {
			  $("#VendorId").val("");
			 let inp = $(this);
			 const searchTerm = inp.val().trim().toLowerCase();
			 let filteredResults = VendorGroupRecords.filter(vendor => {
			let nameMatch = vendor.vendor_name.toLowerCase().includes(searchTerm);
			return nameMatch;
			});
			renderSuggestions(filteredResults, inp);
			if ([2, 4].includes(searchTerm.length))
			{
				loadVendorGroupData(searchTerm, inp);

			}
		});
	 // //   // THIS FUNCTION IS USED TO BIND ID AND NAME ON PRODUCT GROUP DROPDOWN SHOWS
		// // 	$('#suggestions').on('click', '.list-group-item', function () {
		// // 		console.log("v1");
		// //    const selectedName = $(this).text();
		// //   const selectedId = $(this).data('id');
		// //   const abc = $(this).val();
		// //   console.log("selectedName");
		// //   console.log(selectedName);
		// // 	$('#Select_ProductGroupNameId').val(selectedName);
		// // 	$('#ProductGroupId').val(selectedId);
		// // 	$('#suggestions').empty();
		// // });
	 });
	//THIS FUNCTION IS USED TO LOAD FILTERED PRODUCT GROUP
		 function loadVendorGroupData(searchTerm, inp) {
			$.ajax({
				url: '/Dashboard/GetFilteredVendorGroups',
				type: 'GET',
				data: {

					SearchItem: searchTerm
				},
				success: function (data) {
					if (Array.isArray(data)) {
						VendorGroupRecords = data;
						renderSuggestions(data, inp);
					}
				},
				error: function (error) {
					console.error("Error fetching customer data:", error);
				}
			});
		}
		// THIS FUNCTION IS USED TO RENDER THE FILTERED SUGGESTIONS
		function renderSuggestions(data, inp)
		{
			const suggestionBox = document.getElementById('suggestions');
			suggestionBox.innerHTML = ''; // Clear old suggestions

			// Get and normalize input value (supports jQuery or native input)
			const inputValue = (inp.val ? inp.val() : inp.value).trim().toLowerCase();

			const filteredData = data.filter(item =>
				item.vendor_name.toLowerCase().includes(inputValue)
			);

			if (filteredData.length === 0) {
				const noResult = document.createElement('div');
				noResult.classList.add('list-group-item', 'text-muted');
				noResult.textContent = 'No matches found';
				suggestionBox.appendChild(noResult);
				return;
			}

			filteredData.forEach(item => {
				const div = document.createElement('div');
				div.classList.add('list-group-item', 'list-group-item-action');
				div.textContent = item.vendor_name;

				// Set a data attribute for ID
				div.setAttribute('data-id', item.id);

				div.addEventListener('click', function () {
					const name = item.vendor_name;
					const id = item.id;

					// Set name in the input box
					if (inp.val) {
						inp.val(name); // jQuery
					} else {
						inp.value = name; // Native input
					}
					// You could also set it in a hidden input if needed:
					const hiddenInput = document.getElementById('VendorId');
					if (hiddenInput) hiddenInput.value = id;

					suggestionBox.innerHTML = ''; // Clear suggestions
				});

				suggestionBox.appendChild(div);
			});
		}
		// THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
		function ShowWarning(message) {
		Swal.fire({
			//title: 'Good job!',
			text: message,
			icon: 'warning',
			customClass: {
				confirmButton: 'btn btn-primary waves-effect waves-light'
			},
			buttonsStyling: false
		});

	}
		//vina code END SEARCH FUNCTIONALITY
    function loadPageData(page, rowsToShow) {
        GetOrderDate(page, $('#ShowRowid').val());
    }

    // Function to update the Select All checkbox state based on individual checkbox selections
    function updateSelectAllCheckboxState() {
        var table = $("#VendorOrderRejectedTableId");
        var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
        table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
    }

    var selectedRowIds = [];

    function applyFilter() {

        var orderDateFrom = $("#filterOrderDateFrom").val();
        var orderDateTo = $("#filterOrderDateTo").val();
        var deliveryDateFrom = $("#filterDeliveryDateFrom").val();
        var deliveryDateTo = $("#filterDeliveryDateTo").val();

        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();

        var valid = true;

        if (orderDateFrom || orderDateTo) {
            if (!orderDateFrom) {
                $("#WarnfilterOrderDateFrom").show();
                valid = false;
            }
            if (!orderDateTo) {
                $("#WarnfilterOrderDateTo").show();
                valid = false;
            }
        }

        if (deliveryDateFrom || deliveryDateTo) {
            if (!deliveryDateFrom) {
                $("#WarnfilterDeliveryDateFrom").show();
                valid = false;
            }
            if (!deliveryDateTo) {
                $("#WarnfilterDeliveryDateTo").show();
                valid = false;
            }
        }

        if (!valid) {
            return;
        }

        $('#filtercheck').removeClass('d-none');
        $('#filtercross').addClass('d-none');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filterModal').modal('hide');
    }

    function ClearFilter() {
        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();
        $('#filterCustomerMobile').val('');
        $('#filterItemName').val("")
        $('#filterCategory').val('')
        $('#filterVendorName').val('');
        $('#filterOrderDateFrom').val('');
        $('#filterCustomerName').val('');
        $('#filterBranchName').val('');
        $('#filterOrderNo').val('');
        $('#filterOrderDateTo').val('');
        $('#filterDeliveryDateFrom').val('');
        $('#filterDeliveryDateTo').val('');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filtercheck').addClass('d-none');
        $('#filtercross').removeClass('d-none');
    };

    // Dynamically set the minimum date to today's date
    const today = new Date().toISOString().split("T")[0]; // Format to YYYY-MM-DD
    document.getElementById("ExpectedDeliveryDate").setAttribute("min", today);

    var ItemDetailsId;

    function ValidateOrderDeliveryDate() {
		if ($("#ExpectedDeliveryDate").val() != "" && $("#VendorId").val() != "") {
            ItemDetailsId = $("#Txt_BindAllItemsId").val()
            $.ajax({
                type: "POST",
                url: "/Dashboard/CheckDeliveryDateValidOrNot",
                data:
                {
                    ExpectedDate: $("#ExpectedDeliveryDate").val(),
                    ItemDetailsId: ItemDetailsId
                },
                success: function (data) {
                    var Result = JSON.parse(data);

                    //THIS IS USED FOR NO EXTEND ORDER SELECT DATE
                    if (Result["Result"] == 1) {
                        $.ajax({
                            type: "POST",
                            url: "/Dashboard/SendToVendor",
                            data: {
                                ExpectedDate: $("#ExpectedDeliveryDate").val(),
                                ItemDetailsId: ItemDetailsId,
								VendorId: $("#VendorId").val()
                            },
                            success: function (data) {
                                window.location.href = '/Dashboard/VendorOrderRejected';
                            },
                            error: function (response) {

                            }
                        });
                    }
                    else {
                        ShowPromptAlert("Please Check Some Order's Delivery Dates...!! \n Do You Want To Continue Without that Order's...!!")
                    }
                },
                error: function (response) {

                }
            });
        }
        else {
            ShowErrorMsg("Please Select Vendor And ExpectedDate...!!")
        }

    }

    // THIS FUNCTION IS USED TO SHOW PROMPT ALERT WITH YES/NO
    function ShowPromptAlert(message, callbackYes, callbackNo) {
        Swal.fire({
            text: message,
            icon: "question",
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light',
                cancelButton: 'btn btn-secondary waves-effect waves-light'
            },
            buttonsStyling: false
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/Dashboard/SendToVendor",
                    data: {
                        ExpectedDate: $("#ExpectedDeliveryDate").val(),
                        ItemDetailsId: ItemDetailsId,
                        VendorId: $("#VendorId").val()
                    },
                    success: function (data) {
                        window.location.href = '/Dashboard/VendorOrderRejected';
                    },
                    error: function (response) {

                    }
                });
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                // If "No" is clicked
                if (callbackNo) callbackNo();
            }
        });
    }

    // Select all checkboxes when 'Select All' is checked, excluding disabled checkboxes
    $(".Checkbox_SelectAllHeader").on("change", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the header checkbox
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

        // Select or deselect all row checkboxes based on the header checkbox state
        table.find(".RowCheckbox").prop('checked', isChecked);

        // Update the selectedRowIds array based on the "Select All" checkbox
        if (isChecked) {
            // Add all row IDs to the selectedRowIds array for the specific table
            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId && !selectedRowIds.includes(rowId)) {
                    selectedRowIds.push(rowId);
                    console.log(selectedRowIds);
                }
            });
        } else {

            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId) {
                    // Only remove the rowId from the selectedRowIds array if the checkbox is unchecked
                    selectedRowIds = selectedRowIds.filter(function (id) {
                        return id !== rowId;
                    });
                }
            });
        }
    });

    $(document).on("change", ".RowCheckbox", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the checkbox
        var rowId = $(this).data('id');  // Get the row ID from data attribute
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox
        // Add or remove the row ID from the selectedRowIds array based on checkbox state
        if (isChecked) {
            if (!selectedRowIds.includes(rowId)) {
                selectedRowIds.push(rowId);
                console.log(selectedRowIds);
            }
        } else {
            var index = selectedRowIds.indexOf(rowId);
            if (index !== -1) {
                selectedRowIds.splice(index, 1);
                console.log(selectedRowIds);
            }
        }

        // Update the "Select All" checkbox state based on whether all checkboxes in the current table are checked
        updateSelectAllCheckboxState();


    });

    //THIS IS USED FOR WHEN BUTTON CLICK BEFORE THAT CHECK ORDER SELECTED OR NOT
    function openModal() {
        // const selectedValues = $(".rowCheckbox:checked").map(function () {
        //     return $(this).val();
        // }).get(); // Collect values into an array
		
		 $("#suggestions").empty();
		 $("#VendorNameId").val("");
		 $("#ExpectedDeliveryDate").val("");
		
        if (selectedRowIds.join(", ").length > 0) {
            $("#Txt_BindAllItemsId").val(selectedRowIds.join(", "))
            // // Use Bootstrap's modal object to show the modal
            const myModal = new bootstrap.Modal(document.getElementById('SandToVendorModalViewId'));
            myModal.show();
            return true;
        }
        else {
            ShowErrorMsg("Before Proceed Please Select Order Line....!!!", "1")
        }
    }

    $(document).ready(function () {

       // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        if ('@TempData["Message"]' !== "") {
            ShowErrorMsg('@TempData["Message"]');
        }

    @{
        TempData.Remove("Message");  // Remove specific key "Message" from TempData
    }

        GetOrderDate(1, $('#ShowRowid').val());
        // Get values of selected checkboxes
        $("#Btn_AcceptedId").on("click", function () {
            // const selectedValues = $(".rowCheckbox:checked").map(function () {
            //     return $(this).val();
            // }).get(); // Collect values into an array
            // console.log(selectedValues); // Output the array to console
            //alert("Selected Values: " + selectedValues.join(", ").length);
            if (selectedRowIds.join(", ").length > 0) {
                OrderStatusFromHO(selectedRowIds.join(", "), "2")
            }
            else {
                ShowErrorMsg("Please Selected Order lines...!!!", "1")
            }
        });

        // Get values of selected checkboxes
        $("#Btn_RejectedId").on("click", function () {
            // const selectedValues = $(".rowCheckbox:checked").map(function () {
            //     return $(this).val();
            // }).get(); // Collect values into an array
            // console.log(selectedValues); // Output the array to console
            //alert("Selected Values: " + selectedValues.join(", ").length);
            if (selectedRowIds.join(", ").length > 0) {
                OrderStatusFromHO(selectedRowIds.join(", "), "3")
            }
            else {
                ShowErrorMsg("Please Selected Order lines...!!!", "1")
            }
        });

        $('#applyFiltersButton').on('click', function () {

            applyFilter();

        });

        $("#ClearFiltersButton").click(function () {

            ClearFilter();

        });
    });

    // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowErrorMsg(message, flag) {
        if (flag == "0") {
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });
        }
        else {
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'warning',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });
        }
        //alert(message)

    }

    function GetOrderDate(pageNumber, pageSize) {
        const data = {
            CustomerMobile: $('#filterCustomerMobile').val() || '',
            ItemName: $('#filterItemName').val() || '',
            Category: $('#filterCategory').val() || '',
            VendorName: $('#filterVendorName').val() || '',
            CustomerName: $('#filterCustomerName').val() || '',
            BranchName: $('#filterBranchName').val() || '',
            OrderDateFrom: $('#filterOrderDateFrom').val() || '',
            OrderNo: $('#filterOrderNo').val() || '',
            OrderDateTo: $('#filterOrderDateTo').val() || '',
            DeliveryDateFrom: $('#filterDeliveryDateFrom').val() || '',
            DeliveryDateTo: $('#filterDeliveryDateTo').val() || '',
            PageNumber: pageNumber,
            PageSize: pageSize
        };

        $.ajax({
            type: "POST",
            url: "/Dashboard/VendorOrderRejectedfilter",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (data) {
                var res = JSON.parse(data);
                TableBindData(res)
            },
            error: function (response) {

            }
        });
    }

    function TableBindData(res) {
        // Clear the tbody of the table
        $("#VendorOrderRejectedTableId tbody").empty();

        var table = $("#VendorOrderRejectedTableId");

        table.find(".Checkbox_SelectAllHeader").prop('checked', false);

        const paginationInfo = res.PaginationInfo;

        let srno;

        if (res && paginationInfo && paginationInfo.length > 0) {
            const totalRows = paginationInfo[0].TotalRows;
            const totalPages = paginationInfo[0].TotalPages;
            const pageNumber = paginationInfo[0].PageNumber;
            const pageSize = paginationInfo[0].PageSize;
            srno = (pageNumber - 1) * pageSize + 1;

            generatePagination(totalPages, pageNumber);
        }

        if (res && res["OrderData"] && Array.isArray(res["OrderData"])) {
            // Iterate through each order data
            for (let i = 0; i < res["OrderData"].length; i++) {
                // Get the current order data
                let orderItemId = res["OrderData"][i]["order_item_id"] || '';
                let orderStatus = res["OrderData"][i]["order_status"] || '';
                let gross_wt = parseFloat(res["OrderData"][i]["gross_wt"]).toFixed(3) || '';
                let branch = res["OrderData"][i]["branch_name"] || '';
                let orderDate = res["OrderData"][i]["order_date"] ? res["OrderData"][i]["order_date"].split('T')[0] : '';
                let orderDeliveryDate = res["OrderData"][i]["order_delivery_date"] ? res["OrderData"][i]["order_delivery_date"].split('T')[0] : '';

                // Define the edit button logic based on order status
                let LinkData = "";
                if (orderStatus === 1 || orderStatus === 2 || orderStatus === 0) {
                    LinkData = `<a href="/OrderMaster/EditOrder?OrderItemId=${orderItemId}" class="text-primary cursor-pointer">
                                                <span id="Btn_EditCityId" class="text-primary cursor-pointer">
                                                    <i class="fa fa-edit"></i>
                                                </span>
                                            </a>`;
                } else {
                    LinkData = `<a href="javascript:void(0);" class="text-primary cursor-pointer">
                                                <span id="Btn_EditCityId" class="cursor-pointer" onclick="return false" style="color:gray">
                                                    <i class="fa fa-edit"></i>
                                                </span>
                                            </a>`;
                }
                var StoneHideShow = "";
                if (res["OrderData"][i]["gross_wt"] > res["OrderData"][i]["net_wt"]) {
                    StoneHideShow = '<a href="javascript:void(0);" class="text-primary cursor-pointer" onclick="ShowStoneDetails(' + orderItemId + ')"><span class="text-primary cursor-pointer"><i class="fa fa-gem"></i></span></a>';

                }
                else {
                    StoneHideShow = '-';
                }

                // Safely retrieve values for each column, fallback to '-' if null or undefined
                let orderSeriesNo = res["OrderData"][i]["order_series_no"] || '';
                let itemName = res["OrderData"][i]["item_name"] || '';
                let categoryName = res["OrderData"][i]["category_name"] || '';
                let netWt = parseFloat(res["OrderData"][i]["net_wt"]).toFixed(3) || '';
                let purityName = parseFloat(res["OrderData"][i]["purity_name"]).toFixed(2) || '';
                let pcs = res["OrderData"][i]["pcs"] || '';
                let productGroupName = res["OrderData"][i]["product_group_name"] || '';
                let vendorName = res["OrderData"][i]["vendor_name"] || '';
                let status = res["OrderData"][i]["STATUS"] || '';
                const idCheck = res["OrderData"][i]["order_item_id"] || '';
                const isChecked = selectedRowIds.includes(Number(idCheck));

                // Construct the table row HTML
                const data = `
                                   <tr id="${idCheck}">
                                         <td>
                                             <div class="form-check">
                                                <input class="form-check-input RowCheckbox" type="checkbox" data-id="${orderItemId}" name="OrderDetailsId" value="${orderItemId}" id="CityRowCheckBoxId_${idCheck}" ${isChecked ? 'checked' : ''}>
                                             </div>
                                         </td>
                                        <td>${srno}</td>
                                    <td class="sort">
                                        <div class="d-flex gap-3">
                                            ${LinkData}
                                            ${StoneHideShow}
                                            <div class="dropdown">
                                                <span id="Btn_MoreOptionsCityId" class="text-primary cursor-pointer" data-bs-toggle="dropdown">
                                                    <i class="fa fa-ellipsis-v" aria-hidden="true"></i>
                                                </span>
                                                <ul class="dropdown-menu dropdown-menu-end p-0 small">
                                                    <li>
                                                        <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowJobCardDetails('${orderItemId}')">
                                                            <i class="fa fa-id-card me-2"></i>Job Card
                                                        </a><hr class="m-0" />
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowHistoryPage('${orderItemId}')">
                                                            <i class="fa fa-history me-2"></i>History
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </td>
                                    <td>${status}</td>
                                    <td>${orderSeriesNo}</td>
                                    <td>${itemName}</td>
                                    <td>${categoryName}</td>
                                    <td>${gross_wt}</td>
                                    <td>${netWt}</td>
                                    <td>${purityName}</td>
                                    <td>${pcs}</td>
                                    <td>${productGroupName}</td>
                                    <td>${branch}</td>
                                    <td>${orderDate}</td>
                                    <td>${orderDeliveryDate}</td>
                                    <td>${vendorName}</td>
                                </tr>`;

                // Append the row to the table body
                $("#VendorOrderRejectedTableId tbody").append(data);
                srno++;
            }
        } else {
            $("#VendorOrderRejectedTableId tbody").empty();
            $("#VendorOrderRejectedTableId tbody").html(`
                                    <tr>
                                        <td colspan="16" style="text-align: center;">No Data Available</td>
                                    </tr>
                                `);
            generatePagination(1, 1);
        }
        updateSelectAllCheckboxState();
    }

</script>



