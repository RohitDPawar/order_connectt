@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <!-- Bootstrap JS (for dropdowns) -->
}

@section PageScripts {
    <script src="~/js/dashboards-analytics.js"></script>
}

<style>
    .myCardTitle {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%; /* or specify a max-width, if needed */
        display: block;
    }

</style>

@* ************** Third Row (Space Added) ************** *@
<div class="row gy-6 mb-4">
    <div class="col-lg-12">
        <!-- Card for the table -->
        <div class="card">
            <div class="card-body">
                <div class="row gy-6 mb-4">
                    <div class="col-md-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <!-- Title on the left -->
                            <h4 class="card-title mb-0">Assign To Vendor</h4>
                            <!-- Buttons on the right -->
                            <div class="d-flex">
                                <button class="btn btn-danger btn-sm me-2" id="Btn_RejectedId"> <i class="fa fa-times me-1"></i> Reject</button>
                                <button class="btn btn-primary" id="Btn_FilterCityId" data-bs-toggle="modal" data-bs-target="#filterModal">
                                    <img src="~/svg/icons/filtercheck.svg" id="filtercheck" class="me-2 d-none" /><img src="~/svg/icons/filtercross.svg" id="filtercross" class="me-2" /> Filter
                                </button>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="table-responsive table-card mt-3 mb-1">
                    <table class="table align-middle table-nowrap" id="AssignToVendorTableId">
                        <thead class="table-light">
                            <tr>
                                <th class="sort fw-bold">
                                    <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllOrders" />
                                </th>
                                <th class="sort fw-bold" data-sort="Sr No">Sr No</th>
                                <th class="sort fw-bold" data-sort="Action">Action</th>
                                <th class="sort fw-bold" data-sort="Status">Status</th>
                                <th class="sort fw-bold" data-sort="Order No">Order No.</th>
                                <th class="sort fw-bold" data-sort="Item Name">Item Name</th>
                                <th class="sort fw-bold" data-sort="Category">Category</th>
                                <th class="sort fw-bold" data-sort="Gross Weight">Gross Weight</th>
                                <th class="sort fw-bold" data-sort="Net Weight">Net Weight</th>
                                <th class="sort fw-bold" data-sort="Purity">Purity</th>
                                <th class="sort fw-bold" data-sort="Item Pieces">Item Pieces</th>
                                <th class="sort fw-bold" data-sort="Product Group">Product Group</th>
                                <th class="sort fw-bold" data-sort="Branch Name">Branch Name</th>
                                <th class="sort fw-bold" data-sort="Order Date">Order Date</th>
                                <th class="sort fw-bold" data-sort="Order Delivery Date">Order Delivery Date</th>
                                <th class="sort fw-bold" data-sort="Assigned To Karagir">Assigned To Vendor</th>
                            </tr>
                        </thead>
                        <tbody class="form-check-all">
                        </tbody>
                    </table>
                </div>
                @await Html.PartialAsync("Sections/Menu/_pagination")
            </div>
        </div>
    </div>
</div><!-- end row -->

@* ############################################################################ REJECTED RESOAN MODAL ############################################################### *@
<!-- Modal for Adding Product -->
<div class="modal fade" id="RejectedOrderAssignId" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    @using (Html.BeginForm("VendorAssignAfterHOReject", "Dashboard"))
    {
        <div class="modal-dialog" style="margin-top:15%">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rejected Remark</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <input type="hidden" name="SelectedOrderItemId" id="RejectedIDs" />
                        <div class="col">
                            <label>Rejected Remark</label>
                            <input type="text" class="form-control" name="RejectedRemark" id="RejectedRemarkId" required />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    function loadPageData(page, rowsToShow) {
        GetOrderDate(page, $('#ShowRowid').val());

    }

    // Function to update the Select All checkbox state based on individual checkbox selections
    function updateSelectAllCheckboxState() {
        var table = $("#AssignToVendorTableId");
        var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
        table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
    }


    var selectedRowIds = [];

    function applyFilter() {

        var orderDateFrom = $("#filterOrderDateFrom").val();
        var orderDateTo = $("#filterOrderDateTo").val();
        var deliveryDateFrom = $("#filterDeliveryDateFrom").val();
        var deliveryDateTo = $("#filterDeliveryDateTo").val();

        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();

        var valid = true;

        if (orderDateFrom || orderDateTo) {
            if (!orderDateFrom) {
                $("#WarnfilterOrderDateFrom").show();
                valid = false;
            }
            if (!orderDateTo) {
                $("#WarnfilterOrderDateTo").show();
                valid = false;
            }
        }

        if (deliveryDateFrom || deliveryDateTo) {
            if (!deliveryDateFrom) {
                $("#WarnfilterDeliveryDateFrom").show();
                valid = false;
            }
            if (!deliveryDateTo) {
                $("#WarnfilterDeliveryDateTo").show();
                valid = false;
            }
        }

        if (!valid) {
            return;
        }

        $('#filtercheck').removeClass('d-none');
        $('#filtercross').addClass('d-none');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filterModal').modal('hide');
    }

    function ClearFilter() {
        $("#WarnfilterOrderDateFrom, #WarnfilterOrderDateTo").hide();
        $("#WarnfilterDeliveryDateFrom, #WarnfilterDeliveryDateTo").hide();
        $('#filterCustomerMobile').val('');
        $('#filterItemName').val("")
        $('#filterCategory').val('')
        $('#filterVendorName').val('');
        $('#filterOrderDateFrom').val('');
        $('#filterCustomerName').val('');
        $('#filterBranchName').val('');
        $('#filterOrderNo').val('');
        $('#filterOrderDateTo').val('');
        $('#filterDeliveryDateFrom').val('');
        $('#filterDeliveryDateTo').val('');
        GetOrderDate(1, $('#ShowRowid').val());
        $('#filtercheck').addClass('d-none');
        $('#filtercross').removeClass('d-none');
    };

    function GetOrderDate(pageNumber, pageSize) {
        const data = {
            CustomerMobile: $('#filterCustomerMobile').val() || '',
            ItemName: $('#filterItemName').val() || '',
            Category: $('#filterCategory').val() || '',
            VendorName: $('#filterVendorName').val() || '',
            CustomerName: $('#filterCustomerName').val() || '',
            BranchName: $('#filterBranchName').val() || '',
            OrderDateFrom: $('#filterOrderDateFrom').val() || '',
            OrderNo: $('#filterOrderNo').val() || '',
            OrderDateTo: $('#filterOrderDateTo').val() || '',
            DeliveryDateFrom: $('#filterDeliveryDateFrom').val() || '',
            DeliveryDateTo: $('#filterDeliveryDateTo').val() || '',
            PageNumber: pageNumber,
            PageSize: pageSize
        };

        $.ajax({
            type: "POST",
            url: "/Dashboard/AssignToVendorFilter",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (data) {
                var res = JSON.parse(data);
                TableBindData(res)
            },
            error: function (response) {

            }
        });
    }

    function AllDashboardButtonDataGet(Flag) {
        const data = {
            Flag: Flag
        };
        $.ajax({
            type: "POST",
            url: "/Dashboard/GetOrdersOnPrivorityBases",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (data) {
                var res = JSON.parse(data);
                var OrderData = res["OrderData"];

                // Clear the tbody of the table
                $("#AssignToVendorTableId tbody").empty();
                if (OrderData.length > 0) {
                    TableBindData(res)
                }
            },
            error: function (response) {

            }
        });
    }

    // Select all checkboxes when 'Select All' is checked, excluding disabled checkboxes
    $(".Checkbox_SelectAllHeader").on("change", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the header checkbox
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

        // Select or deselect all row checkboxes based on the header checkbox state
        table.find(".RowCheckbox").prop('checked', isChecked);

        // Update the selectedRowIds array based on the "Select All" checkbox
        if (isChecked) {
            // Add all row IDs to the selectedRowIds array for the specific table
            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId && !selectedRowIds.includes(rowId)) {
                    selectedRowIds.push(rowId);
                    console.log(selectedRowIds);
                }
            });
        } else {

            table.find(".RowCheckbox").each(function () {
                var rowId = $(this).data('id');
                if (rowId) {
                    // Only remove the rowId from the selectedRowIds array if the checkbox is unchecked
                    selectedRowIds = selectedRowIds.filter(function (id) {
                        return id !== rowId;
                    });
                }
            });
        }
    });

    $(document).on("change", ".RowCheckbox", function () {
        var isChecked = $(this).prop('checked');  // Get the checked state of the checkbox
        var rowId = $(this).data('id');  // Get the row ID from data attribute
        var table = $(this).closest('table');  // Find the closest table to the clicked checkbox
        // Add or remove the row ID from the selectedRowIds array based on checkbox state
        if (isChecked) {
            if (!selectedRowIds.includes(rowId)) {
                selectedRowIds.push(rowId);
                console.log(selectedRowIds);
            }
        } else {
            var index = selectedRowIds.indexOf(rowId);
            if (index !== -1) {
                selectedRowIds.splice(index, 1);
                console.log(selectedRowIds);
            }
        }

        // Update the "Select All" checkbox state based on whether all checkboxes in the current table are checked
        updateSelectAllCheckboxState();


    });


    $(document).ready(function () {

        // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        if ('@TempData["Message"]' !== "") {
            ShowErrorMsg('@TempData["Message"]',"0");
        }

    @{
        TempData.Remove("Message");  // Remove specific key "Message" from TempData
    }

        GetOrderDate(1, $('#ShowRowid').val());


        // Get values of selected checkboxes for 'Rejected' button
        $("#Btn_RejectedId").on("click", function () {

            if (selectedRowIds.length > 0)
            {
              $("#RejectedOrderAssignId").modal('show')

              $("#RejectedIDs").val(selectedRowIds.join(", "))
            }
            else {
                ShowErrorMsg("Please Select Order lines...!!!", "1");
            }
        });


        $('#applyFiltersButton').on('click', function () {

            applyFilter();

        });

        $("#ClearFiltersButton").click(function () {

            ClearFilter();

        });
    });

    function OrderStatusFromHO(SelectedData)
    {
        $.ajax({
            type: "POST",
            url: "/Dashboard/VendorAssignAfterHOReject",
            data: {
                SelectedDataIds: SelectedData,
            },
            success: function (data) {
                var res = JSON.parse(data);
                var OrderData = res["OrderData"];

                if (OrderData.length > 0) {
                    // Clear the tbody of the table
                    $("#AssignToVendorTableId tbody").empty();
                    TableBindData(res);

                    // if (Status == "2") {
                    //     ShowErrorMsg("Order Accepted Successfully....!!!", "0")
                    // }
                    // else {
                    ShowErrorMsg("Order Rejected Successfully....!!!", "0")
                    //}
                }
            },
            error: function (response) {

            }
        });
    }


    function EditOrderDetailsItemId(orderNo, OrderDetailsId) {
        ShowErrorMsg("Edit Button Click")
    }

    function ShowErrorMsg(message, flag) {
        if (flag == "0") {
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });
        }
        else {
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'warning',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });
        }
        //alert(message)

    }

    function TableBindData(res) {
        // Clear the tbody of the table
        $("#AssignToVendorTableId tbody").empty();

        var table = $("#AssignToVendorTableId");

        table.find(".Checkbox_SelectAllHeader").prop('checked', false);

        const paginationInfo = res.PaginationInfo;

        let srno;

        if (res && paginationInfo && paginationInfo.length > 0) {
            const totalRows = paginationInfo[0].TotalRows;
            const totalPages = paginationInfo[0].TotalPages;
            const pageNumber = paginationInfo[0].PageNumber;
            const pageSize = paginationInfo[0].PageSize;
            srno = (pageNumber - 1) * pageSize + 1;

            generatePagination(totalPages, pageNumber);
        }

        if (res && res["OrderData"] && Array.isArray(res["OrderData"])) {
            // Iterate through each order data
            for (let i = 0; i < res["OrderData"].length; i++) {
                // Get the current order data
                let orderItemId = res["OrderData"][i]["order_item_id"] || '';
                let orderStatus = res["OrderData"][i]["order_status"] || '';
                let orderDate = res["OrderData"][i]["order_date"] ? res["OrderData"][i]["order_date"].split('T')[0] : '';
                let orderDeliveryDate = res["OrderData"][i]["order_delivery_date"] ? res["OrderData"][i]["order_delivery_date"].split('T')[0] : '';

                // Define the edit button logic based on order status
                let LinkData = "";
                // Check the order status and construct the edit button dynamically
                if (orderStatus === 1 || orderStatus === 2 || orderStatus === 0) {
                    LinkData = `<a href="/OrderMaster/EditOrder?OrderItemId=${orderItemId}" class="text-primary cursor-pointer">
                                                                        <span id="Btn_EditCityId" class="text-primary cursor-pointer">
                                                                            <i class="fa fa-edit"></i>
                                                                        </span>
                                                                    </a>`;
                } else {
                    LinkData = `<a href="javascript:void(0);" class="text-primary cursor-pointer">
                                                                        <span id="Btn_EditCityId" class="cursor-pointer" onclick="return false" style="color:gray">
                                                                            <i class="fa fa-edit"></i>
                                                                        </span>
                                                                    </a>`;
                }

                var StoneHideShow = "";
                if (res["OrderData"][i]["gross_wt"] > res["OrderData"][i]["net_wt"]) {
                    StoneHideShow = '<a href="javascript:void(0);" class="text-primary cursor-pointer" onclick="ShowStoneDetails(' + orderItemId + ')"><span class="text-primary cursor-pointer"><i class="fa fa-gem"></i></span></a>';

                }
                else {
                    StoneHideShow = '-';
                }
                // Safely retrieve values for each column, fallback to '-' if null or undefined
                let orderSeriesNo = res["OrderData"][i]["order_series_no"] || '';
                let itemName = res["OrderData"][i]["item_name"] || '';
                let categoryName = res["OrderData"][i]["category_name"] || '';
                let grossWt = parseFloat(res["OrderData"][i]["gross_wt"]).toFixed(3) || '';
                let netWt = parseFloat(res["OrderData"][i]["net_wt"]).toFixed(3) || '';
                let purityName = parseFloat(res["OrderData"][i]["purity_name"]).toFixed(2) || '';
                let pcs = res["OrderData"][i]["pcs"] || '';
                let productGroupName = res["OrderData"][i]["product_group_name"] || '';
                let branchName = res["OrderData"][i]["branch_name"] || '';
                let vendorName = res["OrderData"][i]["vendor_name"] || '';
                let status = res["OrderData"][i]["STATUS"] || '';
                const idCheck = res["OrderData"][i]["order_item_id"] || '';
                const isChecked = selectedRowIds.includes(Number(idCheck));


                const data = `  <tr id="${idCheck}">
                                                <td>
                                                    <div class="form-check">
                                                                                        <input class="form-check-input RowCheckbox" type="checkbox" data-id="${orderItemId}" name="OrderDetailsId" value="${orderItemId}" id="CityRowCheckBoxId_${idCheck}" ${isChecked ? 'checked' : ''}>
                                                    </div>
                                                </td>
                                                              <td>${srno}</td>
                                                            <td class="sort">
                                                                <div class="d-flex gap-3">
                                                                    ${LinkData}
                                                                    ${StoneHideShow}
                                                                    <div class="dropdown">
                                                                    <span id="Btn_MoreOptionsCityId" class="text-primary cursor-pointer" data-bs-toggle="dropdown">
                                                                        <i class="fa fa-ellipsis-v" aria-hidden="true"></i>
                                                                    </span>
                                                                    <ul class="dropdown-menu dropdown-menu-end p-0 small">
                                                                        <li>
                                                                             <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowJobCardDetails('${orderItemId}')">
                                                                                <i class="fa fa-id-card me-2"></i>Job Card
                                                                            </a><hr class="m-0" />
                                                                        </li>
                                                                        <li>
                                                                             <a class="dropdown-item py-1" href="javascript:void(0);" onclick="ShowHistoryPage('${orderItemId}')">
                                                                                <i class="fa fa-history me-2"></i>History
                                                                            </a>
                                                                        </li>
                                                                    </ul>
                                                                </div>
                                                                </div>
                                                            </td>
                                                            <td>${status}</td>
                                                            <td>${orderSeriesNo}</td>
                                                            <td>${itemName}</td>
                                                            <td>${categoryName}</td>
                                                            <td>${grossWt}</td>
                                                            <td>${netWt}</td>
                                                            <td>${purityName}</td>
                                                            <td>${pcs}</td>
                                                            <td>${productGroupName}</td>
                                                            <td>${branchName}</td>
                                                            <td>${orderDate}</td>
                                                            <td>${orderDeliveryDate}</td>
                                                            <td>${vendorName}</td>
                                                        </tr>`;

                // Append the row to the table body
                $("#AssignToVendorTableId tbody").append(data);
                srno++;
            }
        } else {
            $("#AssignToVendorTableId tbody").empty();
            $("#AssignToVendorTableId tbody").html(`
                                        <tr>
                                            <td colspan="15" style="text-align: center;">No Data Available</td>
                                        </tr>
                                    `);
            generatePagination(1, 1);
        }

        updateSelectAllCheckboxState();
    }

</script>
