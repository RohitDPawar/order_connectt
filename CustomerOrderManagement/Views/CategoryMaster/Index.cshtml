@{
    int srno = 1;
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="listjs-table" id="customerList">
                    <div class="row g-4 mb-3">
                        <!-- Title and Buttons in a Single Row -->
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center flex-wrap">
                                <!-- Title -->
                                <h3 class="mb-0">Category Master</h3>

                                <!-- Buttons -->
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#ImportCategoryModalId" id="Btn_ImportOrderData">
                                        <i class="ri-upload-cloud-line ri-18px me-2"></i> Import
                                    </button>
                                    <button class="btn btn-danger" id="Btn_ExportToExcelCategoryId">Export File</button>

                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryMasterModal" id="Btn_AddCategoryId" onclick="ClearAllValue()">
                                        <i class="align-bottom me-1"></i> Add Category
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Second Row: Search Textbox and Buttons -->
                    <div class="col-12">
                        <div class="d-flex align-items-center gap-2">
                            <input type="text" class="form-control" name="search" placeholder="Search..." id="Txt_SearchInputCategoryName" maxlength="50" />
                            <button type="button" class="btn btn-primary" id="Btn_SearchCategoryId">Search</button>
                            <button type="button" class="btn btn-secondary" id="Btn_ResetSearchCategoryId">Reset</button>
                        </div>
                        <!-- Hidden Edit Button -->
                        <button type="button" data-bs-toggle="modal" data-bs-target="#EditCategoryMasterModal" id="Btn_EditCategoryId" style="display:none"></button>
                    </div>

                    <div class="table-responsive table-card mt-3 mb-1">
                        <table class="table align-middle table-nowrap" id="CategoryItemId">
                            <thead class="table-light">
                                <tr>
                                    <th class="sort fw-bold">
                                        <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllCategryHeader" />
                                    </th>
                                    <th class="sort fw-bold" data-sort="srno">SR No</th>
                                    <th class="sort fw-bold" data-sort="action">Action</th>
                                    <th class="sort fw-bold" data-sort="TenantName">Tenant Name</th>
                                    <th class="sort fw-bold" data-sort="Itemname">Item Name</th>
                                    <th class="sort fw-bold" data-sort="productName">Category Name</th>
                                    <th class="sort fw-bold" data-sort="status">Status</th>
                                </tr>
                            </thead>
                            <tbody class="form-check-all">
                            </tbody>
                        </table>
                    </div>

                    @* THIS PARTIAL VIEW USED FOR PAGGINATION *@
                    @await Html.PartialAsync("Sections/Menu/_pagination")
                </div>
            </div><!-- end card -->
        </div><!-- end col -->
    </div><!-- end col -->
</div>

<!-- Modal for Adding Product -->
<div class="modal fade" id="addCategoryMasterModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form for adding a new product group -->
                @using (Html.BeginForm("SaveAddCategory", "CategoryMaster"))
                {
                    <div class="row px-3">
                        <label class="form-label">Tenant Name<span style="color:red;font-weight:800">*</span></label>
                        <select class="form-control" name="TenantName" id="Select_TenantNameId" required>
                            @foreach (var item in ViewBag.GetAllTenants)
                            {
                                <option value="@item["id"]">@item["tenant_name"]</option>
                            }
                        </select>
                    </div>
@*                   <div class="row px-3">
                        <label class="form-label">Item Name<span style="color:red;font-weight:800">*</span></label>
                        <select class="form-control" name="ItemName" id="Select_ItemNameId" required>
                            <option value="">Please Select Item</option>
                            @foreach (var item in ViewBag.AllItems)
                            {
                                <option value="@item["id"]">@item["item_name"]</option>
                            }
                        </select>
                    </div> *@
					<div class="row px-3">
						<label class="form-label">Item Name<span style="color:red;font-weight:800">*</span></label>
						<input type="text" class="form-control" name="ItemName1" id="Select_ItemNameId" placeholder="Type Item name..."  required />
						<div id="suggestions" class="list-group mt-1"></div>
						<input type="hidden" name="ItemName" id="ItemNameId" value="" />
					</div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Category Name<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control" name="CategoryName" id="Txt_CategoryNameId" minlength="1" maxlength="50" required />
                        <span id="WarnCategoryId" style="display:none"></span>
                    </div>

                    <div class="row px-3 mt-3">
                        <label class="form-label">Remark</label>
                        <input type="text" class="form-control" name="remark" id="Txt_RemarkId" maxlength="200" />
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Status<span style="color:red;font-weight:800">*</span></label>
                        <div class="row pt-2">
                            <div class="col-md-3">
                                <input type="radio" class="form-check-input" id="Radio_ActiveId" name="IsActive" value="1" checked />
                                <label> Active</label>&nbsp;
                            </div>
                            <div class="col-md-4">
                                <input type="radio" class="form-check-input" id="Radio_DeactiveId" name="IsActive" value="0">&nbsp;
                                <label> Deactive</label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="d-flex justify-content-end gap-2 px-3">
                        <div>
							<button type="submit" class="btn btn-primary" id="Btn_SubmitId" onclick="return ValidateData()">
                                <i class="align-bottom me-1"></i> Add
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal for Editing Product -->
<div class="modal fade" id="EditCategoryMasterModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form for editing -->
                @using (Html.BeginForm("SaveEditCategory", "CategoryMaster"))
                {
                    <input type="hidden" id="RecordId" name="UpdateRecordId" />
                    <div class="row px-3">
                        <label class="form-label">Tenant Name<span style="color:red;font-weight:800">*</span></label>
                        <select class="form-control" name="TenantName" id="Select_UpdateTenantNameId" disabled>
                            @foreach (var item in ViewBag.GetAllTenants)
                            {
                                <option value="@item["id"]">@item["tenant_name"]</option>
                            }
                        </select>
                    </div>
                    <div class="row px-3">
                        <label class="form-label">Item Name<span style="color:red;font-weight:800">*</span></label>
                        <select class="form-control" name="ItemName" id="Select_UpdateItemNameId" disabled>
                            <option value="">Please Select Item</option>
                            @foreach (var item in ViewBag.AllItems)
                            {
                                <option value="@item["id"]">@item["item_name"]</option>
                            }
                        </select>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Category Name<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control onlyCharacterAndDash" name="CategoryName" id="Txt_UpdateCategoryNameId" maxlength="50" disabled />
                        <span id="WarnUpdateCategoryId" style="display:none"></span>
                    </div>

                    <div class="row px-3 mt-3">
                        <label class="form-label">Remark</label>
                        <input type="text" class="form-control" name="remark" id="Txt_UpdateRemarkId" maxlength="200" />
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Status<span style="color:red;font-weight:800">*</span></label>
                        <div class="row pt-2">
                            <div class="col-md-3">
                                <input type="radio" class="form-check-input" id="Radio_UpdateActiveId" name="IsActive" value="1" checked />
                                <label> Active</label>&nbsp;
                            </div>
                            <div class="col-md-4">
                                <input type="radio" class="form-check-input" id="Radio_UpdateDeactiveId" name="IsActive" value="0">&nbsp;
                                <label> Deactive</label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="d-flex justify-content-center align-items-center px-3">
                        <div>
                            <button type="submit" class="btn btn-primary d-grid" id="Btn_UpdateId">
                                <i class="align-bottom me-1"></i> Update
                            </button>
                        </div>
                        <button type="button" class="btn btn-primary ms-3" data-bs-dismiss="modal">Cancel</button>
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<!-- Modal for History Details -->
<div class="modal fade" id="CategoryHistoryModal" tabindex="-1" aria-labelledby="HistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">History Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="table-responsive table-card mt-3 mb-1">
                    <table class="table align-middle table-nowrap" id="CategoryHistorytable-id">
                        <thead class="table-light">
                            <tr>
                                <th>Action</th>
                                <th>Tenat Name</th>
                                <th>Item Name</th>
                                <th>Category Name</th>
                                <th>Remark</th>
                                <th>Status</th>
                                <th>Ip Address</th>
                               @*  <th>Created At</th>
                                <th>Created By</th> *@
                                <th>Updated At</th>
                                <th>Updated By</th>
                            </tr>
                        </thead>
                        <tbody >
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Modal for import file -->
<div class="modal fade" id="ImportCategoryModalId" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUploadfileLabel">Upload File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row px-3 mt-3 gap-2">
                    <!-- Wrap this section with a form to send data -->
                    @using (Html.BeginForm("UploadCategoryMaster", "CategoryMaster", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
                    {
                        <label class="form-label">Select File<span style="color:red;font-weight:500">*</span></label>
                        <div class="d-flex">
                            <input type="file" class="form-control" name="file" id="file_Id" required accept=".xlsx" />
                        </div>
                        <span id="WarnbrowseId" style="color:red; display:none;">Please upload only .xlsx file extension</span>

                        <div id="loadingSpinner" style="display: none; text-align: center;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>Uploading file...</div>
                        </div>
                        <div class="d-flex justify-content-end align-items-end px-3 m-3 gap-2">
                            <button type="button" class="btn btn-outline-primary d-flex align-items-center" id="samplesheetbtn">
                                <i class="align-bottom me-1"></i> Download Format
                            </button>
                            <button type="submit" class="btn btn-primary d-grid" id="uploadBtn">
                                <i class="align-bottom me-1"></i> Upload
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
	////VINA CODE START FOR SEARCH FUNCTIONALITY
	let ItemGroupRecords = [];
	// THIS IS TO VALIDATE CORRECT ITEM NAME IS DISPLAY
	function ValidateData()
	{
			if($("#ItemNameId").val() == ""){
				ShowWarning("Enter Valid Item Name...")
				return false;
			}
			else{
				return true;
			}
	}
		//SEARCH FUNCTION
		$(document).ready(function ()
	{
			//THIS FUNCTION IS USED TO SEARCH ON ITEM GROUP NAME TYPED
		$('#Select_ItemNameId').on('keyup', function () {
			 let inp = $(this);
			 const searchTerm = inp.val().trim().toLowerCase();
				let filteredResults = ItemGroupRecords.filter(customer => {
				let nameMatch = customer.item_name.toLowerCase().includes(searchTerm);
			return nameMatch;
			});
			renderSuggestions(filteredResults, inp);
			if ([2,4].includes(searchTerm.length))
			{
				loadProductGroupData(searchTerm, inp);

			}
		});
			// THIS FUNCTION IS USED TO BIND ID AND NAME ON ITEM GROUP DROPDOWN SHOWS
		// $('#suggestions').on('click', '.list-group-item', function ()
		// {
		// 	const selectedName = $(this).text();
		// 	const selectedId = $(this).data('id');
		// 	const abc = $(this).val();
		// 	$('#Select_ItemNameId').val(selectedName);
		// 	$('#ItemNameId').val(selectedId);
		// 	$('#suggestions').empty();
		// });
	});
		//THIS FUNCTION IS USED TO LOAD FILTERED ITEM GROUP
	function loadProductGroupData(searchTerm, inp)
	{
			$.ajax({
				url: '/CategoryMaster/GetFilteredItemGroups',
				type: 'GET',
				data: { 

					SearchItem: searchTerm
				},
				success: function (data) {



					if (Array.isArray(data)) {
							ItemGroupRecords = data;
						renderSuggestions(data, inp);
					}
				},
				error: function (error) {
					console.error("Error fetching customer data:", error);
				}
			});
	}
	// THIS FUNCTION IS USED TO RENDER THE FILTERED SUGGESTIONS
	function renderSuggestions(data, inp)
		{
			const suggestionBox = document.getElementById('suggestions');
			suggestionBox.innerHTML = ''; // Clear old suggestions

			// Get and normalize input value (supports jQuery or native input)
			const inputValue = (inp.val ? inp.val() : inp.value).trim().toLowerCase();

			const filteredData = data.filter(item =>
					item.item_name.toLowerCase().includes(inputValue)
			);

			if (filteredData.length === 0) {
				const noResult = document.createElement('div');
				noResult.classList.add('list-group-item', 'text-muted');
				noResult.textContent = 'No matches found';
				suggestionBox.appendChild(noResult);
				return;
			}

			filteredData.forEach(item => {
				const div = document.createElement('div');
				div.classList.add('list-group-item', 'list-group-item-action');
					div.textContent = item.item_name;

				// Set a data attribute for ID
				div.setAttribute('data-id', item.id);

				div.addEventListener('click', function () {
						const name = item.item_name;
					const id = item.id;
					if (inp.val) {
						inp.val(name); 
					} else {
						inp.value = name; 
					}
					// You could also set it in a hidden input if needed:
					const hiddenInput = document.getElementById('ItemNameId');
					if (hiddenInput) hiddenInput.value = id;

					suggestionBox.innerHTML = '';
				});

				suggestionBox.appendChild(div);
			});
		}
//end code VINA

	// THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowWarning(message) {
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: 'warning',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });

    }

    $(document).ready(function () {
        // Handle the form submission using AJAX
        $("#uploadForm").submit(function (e) {
            e.preventDefault(); // Prevent default form submission
            var fileInput = $('#file_Id')[0];
            var file = fileInput.files[0]; // Get the first file from the input

            // Check if a file was selected
            if (!file) {
                alert("Please select a file.");
                return;
            }

            // Validate the file type (allow only .csv, .xls, .xlsx)
            var allowedExtensions = /(\.csv|\.xls|\.xlsx)$/i;
            if (!allowedExtensions.exec(file.name)) {
                $('#WarnbrowseId').show(); // Show warning message
                return; // Stop form submission if the file type is not valid
            } else {
                $('#WarnbrowseId').hide();
            }
            var formData = new FormData(this); // Create FormData object from the form
            showSpinner();
            $.ajax({
                url: '@Url.Action("UploadCategoryMaster", "CategoryMaster")', // Your controller action URL
                type: 'POST',
                data: formData,
                processData: false, // Don't process the data
                contentType: false, // Don't set content type header
                success: function (response) {
                    if (response.success) {
                        // Decode Base64 to binary string
                        var byteCharacters = atob(response.fileContent); // Decode Base64 to binary string
                        var byteArray = new Uint8Array(byteCharacters.length);

                        for (var i = 0; i < byteCharacters.length; i++) {
                            byteArray[i] = byteCharacters.charCodeAt(i); // Convert to byte array
                        }

                        // Create a blob from the byte array
                        var blob = new Blob([byteArray], { type: response.fileType });

                        // Create a link element for downloading
                        var link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = response.fileName; // Set the download file name
                        link.click(); // Trigger the download

                        $('#file_Id').val(''); // Clear the file input (if it exists)
                        hideSpinner(); // Hide the spinner when there's an error
                        // Close the modal (if present)
                        $('#importFileModal2').modal('hide');
                        ShowErrorMsg("File Imported Succesfully....", "1")
                        setTimeout(function () {
                            location.reload();
                        }, 3000); // 3000 milliseconds = 3 seconds
                    } else {
                        $('#file_Id').val('');
                        if (response.flag === '1') {
                            $('#file_Id').val(''); // Clear the file input (if it exists)
                            hideSpinner(); // Hide the spinner when there's an error
                            // Close the modal (if present)
                            $('#importFileModal2').modal('hide');
                            ShowErrorMsg("File Imported Succesfully....", "1")
                            setTimeout(function () {
                                location.reload();
                            }, 500); // 3000 milliseconds = 3 seconds

                        } else {
                            ShowWarning(response.message)
                        }
                        hideSpinner();
                    }
                },
                error: function (xhr, status, error) {
                    //alert("Error uploading file. Please try again.");
                    ShowWarning("Error uploading file. Please try again.....")
                    hideSpinner(); // Hide the spinner when there's an error
                }
            });

        });

        // Show spinner and disable the upload button when upload starts
        function showSpinner() {
            $('#loadingSpinner').show(); // Display the spinner
            $('#uploadBtn').prop('disabled', true); // Disable the upload button
        };

        // Hide spinner and enable the upload button after the upload is complete
        function hideSpinner() {
            $('#loadingSpinner').hide(); // Hide the spinner
            $('#uploadBtn').prop('disabled', false); // Enable the upload button
        };

        // $("#Txt_CategoryNameId").on("input", function () {
        //     let value = $(this).val();

        //     // Remove spaces or special characters from the start
        //     if (!/^[A-Za-z]/.test(value)) {
        //         $(this).val(value.replace(/^[^A-Za-z]+/, ""));
        //     }
        // });

    });

    // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowErrorMsg(message) {
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: 'success',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });

    }

    function loadPageData(page, rowsToShow) {
        GetCategoryData(page, $('#ShowRowid').val());


    }
    // Function to update the Select All checkbox state based on individual checkbox selections
    function updateSelectAllCheckboxState() {
        var table = $("#CategoryItemId");
        var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
        table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
    }


    var selectedRowIds = [];
    var SearchText;

    $(document).ready(function () {

        GetCategoryData(1, $('#ShowRowid').val());

        $(".Checkbox_SelectAllHeader").on("change", function () {
            var isChecked = $(this).prop('checked');
            var table = $(this).closest('table');

            table.find(".RowCheckbox").prop('checked', isChecked);

            if (isChecked) {
                table.find(".RowCheckbox").each(function () {
                    var rowId = $(this).data('id');
                    if (rowId && !selectedRowIds.includes(rowId)) {
                        selectedRowIds.push(rowId);
                    }
                });
            } else {

                table.find(".RowCheckbox").each(function () {
                    var rowId = $(this).data('id');
                    if (rowId) {
                        selectedRowIds = selectedRowIds.filter(function (id) {
                            return id !== rowId;
                        });
                    }
                });
            }
        });

        $(document).on("change", ".RowCheckbox", function () {
            var isChecked = $(this).prop('checked');
            var rowId = $(this).data('id');
            var table = $(this).closest('table');

            if (isChecked) {
                if (!selectedRowIds.includes(rowId)) {
                    selectedRowIds.push(rowId);
                }
            } else {
                var index = selectedRowIds.indexOf(rowId);
                if (index !== -1) {
                    selectedRowIds.splice(index, 1);
                }
            }

            updateSelectAllCheckboxState()

        });

        // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        if ('@TempData["Message"]' !== "") {
            ShowErrorMsg('@TempData["Message"]');
        }
    @{
        TempData.Remove("Message");  // Remove specific key "Message" from TempData
    }
            function sendSelectedRowIds() {
                // Check if there are any selected row IDs
                var searchValue = SearchText;
                var rowIdsString = selectedRowIds.join(',');
                // Make an AJAX request to send the data to the controller action
                $.ajax({
                    type: "POST",
                    url: "/CategoryMaster/ExportdataExcel",
                    data: {
                        selectedRowIds: rowIdsString,
                        searchValue: searchValue
                    },
                    success: function (response) {
                        if (response.success) {
                            // Decode Base64 to binary string
                            var byteCharacters = atob(response.fileContent); // Decode Base64 to binary string
                            var byteArray = new Uint8Array(byteCharacters.length);

                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteArray[i] = byteCharacters.charCodeAt(i); // Convert to byte array
                            }

                            // Create a blob from the byte array
                            var blob = new Blob([byteArray], { type: response.fileType });

                            // Create a link element for downloading
                            var link = document.createElement('a');
                            link.href = URL.createObjectURL(blob);
                            link.download = response.fileName; // Set the download file name
                            link.click();
                        } else {
                            ShowErrorMsg(response.message)
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle the error (failure)
                        console.error('Error occurred while sending data to the server:', error);

                        // Optionally, display an error message
                        alert('An error occurred while processing your request.');
                    }
                });

            }


        $('#Btn_SearchCategoryId').on('click', function () {
            SearchText = $('#Txt_SearchInputCategoryName').val();
            GetCategoryData(1, $('#ShowRowid').val());
        });

        $("#Btn_ResetSearchCategoryId").on("click", function () {
            location.reload();
        });


        // EXPORT TO EXCEL BUTTON FUNCTIONALITY
        $("#Btn_ExportToExcelCategoryId").click(function () {

            sendSelectedRowIds();

        });
    });

    function ClearAllValue() {
        $("#Radio_ActiveId").prop("checked", true);
        $("#Txt_CategoryNameId").val("");
		$("#Select_ItemNameId").val("");
        $("#Txt_RemarkId").val("");
		$("#suggestions").empty();
        $("#WarnCategoryId").css({ "display": "none" });
        $("#WarnUpdateCategoryId").css({ "display": "none" });
    }


    //THIS IS USED FOR GET EDIT DATA
    function EditCategoryId(id, Flag) {
        $("#WarnCategoryId").css({ "display": "none" });
        $("#WarnUpdateCategoryId").css({ "display": "none" });

        $.ajax({
            type: "POST",
            url: "/CategoryMaster/EditCategory",
            data: {
                ID: id,
                Flag: Flag
            },
            success: function (data) {
                var res = JSON.parse(data);
                var CategoryData = res["CategoryData"]
                var Flag = res["Flag"]
                //console.log(Flag)
                if (Flag === "Show") {
                    $("#Btn_UpdateId").prop("disabled", false);
                }
                else {
                    $("#Btn_UpdateId").prop("disabled", true);
                }
                document.getElementById('RecordId').value = CategoryData[0]["id"];
                document.getElementById('Select_UpdateTenantNameId').value = CategoryData[0]["tenant_id"];
                document.getElementById('Select_UpdateItemNameId').value = CategoryData[0]["item_id"];
                document.getElementById('Txt_UpdateCategoryNameId').value = CategoryData[0]["category_name"];
                document.getElementById('Txt_UpdateRemarkId').value = CategoryData[0]["remark"];

                //THIS IS USED FOR CHECKED ACTIVE INACTIVE
                if (CategoryData[0]["is_active"] == "1") {
                    $("#Radio_UpdateActiveId").prop("checked", true);
                } else {
                    $("#Radio_UpdateDeactiveId").prop("checked", true);
                }

                $("#Btn_EditCategoryId").click();

            },
            error: function (response) {

            }
        });
    }

    $('#Txt_CategoryNameId, #Txt_UpdateCategoryNameId').on("change paste", function () {
        const inputFieldId = $(this).attr('id'); // Get the ID of the field that triggered the event
        const value = $(this).val();

        if (inputFieldId === "Txt_CategoryNameId") {
            ItemId = $("#Select_ItemNameId").val();
        } else {
            ItemId = $("#Select_UpdateItemNameId").val();
        }
        console.log(ItemId);

        $.ajax({
            type: "POST",
            url: "/CategoryMaster/CheckDuplicateRecord",
            data: {
                ColName: "category_name",
                value: value,
                ItemId: ItemId
            },
            success: function (data) {
                if (data > 0) {
                    // Clear the field that triggered the event
                    $('#' + inputFieldId).val("");

                    // Show warning for the respective field
                    if (inputFieldId === "Txt_CategoryNameId") {
                        $("#WarnCategoryId").css({ "display": "block", "color": "red" }).text("Category Name Already Exists...");
                    } else if (inputFieldId === "Txt_UpdateCategoryNameId") {
                        $("#WarnUpdateCategoryId").css({ "display": "block", "color": "red" }).text("Category Name Already Exists...");
                    }
                } else {
                    // Hide warnings
                    $("#WarnCategoryId").css({ "display": "none" });
                    $("#WarnUpdateCategoryId").css({ "display": "none" });
                }
            },
            error: function (response) {
                console.error("Error during AJAX request:", response);
            }
        });
    });

    // THIS FUNCTION IS USED TO SHOW HISTORY DETAILS
    function ShowHistory(id) {

        $.ajax({
            type: "POST",
            url: "/CategoryMaster/GetHistoryData",
            data: { id: id },
            success: function (data) {
                var res = JSON.parse(data);
                var HistoryData = res["HistoryData"];
                
                $("#CategoryHistorytable-id tbody").empty();

                if (HistoryData.length > 0) {
                    HistoryData.forEach(function (item) {
                        var row = '<tr>';
                        row += '<td>' + (item.action_name === 'A' ? 'Add' : item.action_name === 'U' ? 'Update' : 'Delete') + '</td>';
                        row += '<td>' + (item.tenant_name || '') + '</td>';
                        row += '<td>' + (item.item_name || '') + '</td>';
                        row += '<td>' + (item.category_name || '') + '</td>';
                        row += '<td>' + (item.remark || '') + '</td>';
                        row += '<td>' + (item.is_active == '1' ? 'Active' : 'Deactive') + '</td>';
                        row += '<td>' + (item.ip_address || '') + '</td>';
                        // row += '<td>' + (item.created_at || '') + '</td>';
                        // row += '<td>' + (item.created_by || '') + '</td>';
                        row += '<td>' + (item.updated_at ? item.updated_at.replace('T', ' ') : '') + '</td>';
                        row += '<td>' + (item.updated_by || '') + '</td>';
                        row += '</tr>';

                        $("#CategoryHistorytable-id tbody").append(row);
                    });
                } else {
                    // If no data, show a message (optional)
                    historyTableBody.append('<tr><td colspan="11" class="text-center">No history available</td></tr>');
                    $('#CategoryHistoryModal').modal('show');
                }
            },
            error: function (response) {
                console.error("Error during AJAX request:", response);
            }
        });

    }

    function TableBindCategoryData(response, paginationt) {
        // Clear existing table rows
        $("#CategoryItemId tbody").empty();

        // Reference to the table
        const table = $("#CategoryItemId");

        // Uncheck the "Select All" checkbox in the header
        table.find(".Checkbox_SelectAllHeader").prop("checked", false);

        let srno = 1; // Default serial number
        if (paginationt && paginationt.length > 0) {
            const totalRows = paginationt[0].TotalRows;
            const totalPages = paginationt[0].TotalPages;
            const pageNumber = paginationt[0].PageNumber;
            const pageSize = paginationt[0].PageSize;
            srno = (pageNumber - 1) * pageSize + 1;

            generatePagination(totalPages, pageNumber);
        } else {
            console.error('PaginationInfo is not available or is in an incorrect format. Response:', paginationt);
        }

        if (Array.isArray(response) && response.length > 0) {
            response.forEach((category) => {
                const categoryId = category.id.toString();

                // Check if the current item is selected
                const isChecked = selectedRowIds.some((id) => id.toString() === categoryId);

                // Generate table row for the item
                const rowData = `
                                <tr id="${category.id}">
                                <td>
                                    <div class="form-check">
                                        <input
                                            class="form-check-input RowCheckbox"
                                            type="checkbox"
                                                data-id="${category.id}"
                                                id="ItemRowCheckBoxId_${category.id}"
                                            ${isChecked ? "checked" : ""}>
                                    </div>
                                </td>
                                <td>${srno}</td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <div class="edit">
                                            <button
                                                class="btn btn-sm btn-success"
                                                style="margin:1px; cursor:pointer;"
                                                        onclick="EditCategoryId(${category.id}, 'Show')"
                                                id="Btn_EditItemId">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                        </div>
                                            <div class="history">
                                                            <span class="btn btn-sm btn-warning" style="margin:1px; cursor:pointer;" title="History" data-bs-toggle="modal" data-bs-target="#CategoryHistoryModal" id="Btn_categoryHistoryId" onclick="ShowHistory(${category.id})">
                                                    <i class="fas fa-history"></i>
                                                </span>
                                            </div>
                                    </div>
                                </td>
                                    <td>${category.tenant_name || ""}</td>
                                    <td>${category.item_name || ""}</td>
                                        <td>${category.category_name || ""}</td>
                                    <td>${category.is_active === 1 ? "Active" : "Deactive"}</td>
                            </tr>
                        `;

                // Append the row to the table body
                $("#CategoryItemId tbody").append(rowData);

                srno++; // Increment the serial number
            });
        } else {
            // Handle the case where there is no data
            $("#CategoryItemId tbody").html(`
                        <tr>
                            <td colspan="7" style="text-align: center;">No Data Available</td>
                        </tr>
                    `);
        }

        // Update the "Select All" checkbox state
        updateSelectAllCheckboxState();
    }

    function GetCategoryData(pageNumber, pageSize) {
        const data = {
            PageNumber: pageNumber,
            PageSize: pageSize,
            SearchText: SearchText
        };

        $.ajax({
            type: "POST",
            url: "/CategoryMaster/GetCategoryData",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (response) {

                const categoryData = response.CategoryData;
                const paginationInfo = response.PaginationInfo;


                TableBindCategoryData(categoryData, paginationInfo);
            },
            error: function (xhr, status, error) {
                // // Only log the error if it's not a 'No Data Available' situation
                // if (xhr.status !== 404 && xhr.status !== 204) {
                //     console.error("Error fetching item data", xhr.responseText);
                // }

                // Clear the table body and display a "No Data Available" message if no data is fetched
                $("#CategoryItemId tbody").empty();
                $("#CategoryItemId tbody").html(`
                                        <tr>
                                            <td colspan="9" style="text-align: center;">No Data Available</td>
                                        </tr>
                                    `);
                generatePagination(1, $('#ShowRowid').val());
            }
        });
    }
    
    $('#samplesheetbtn').on('click', function () {
        // Make AJAX call to download the sample sheet
        $.ajax({
            url: '/CategoryMaster/DownloadSampleSheet',  // The URL to your controller action
            type: 'GET',
            success: function (response) {
                // Construct the full URL using the current site's base URL and the relative path
                var fileUrl = window.location.origin + response.fileUrl;

                // Create a link to trigger the download
                var link = document.createElement('a');
                link.href = fileUrl;  // Use the full URL of the file
                link.download = 'category_import_sample.xlsx';  // Specify the filename for the download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            },
            error: function (xhr, status, error) {
                console.error('Error downloading the sample sheet:', error);
                alert('There was an error downloading the file. Please try again later.');
            }
        });
    });

       
</script>
