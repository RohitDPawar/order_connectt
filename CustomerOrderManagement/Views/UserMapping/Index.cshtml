@if (ViewBag.Subscription == "" || ViewBag.Subscription == null)
{
    <h3>Your Subscription has been expired..</h3>
    <script>
        alert("Subscription Expired....")
    </script>
}
else
{
    int srno = 1;
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <div class="listjs-table" id="customerList">
                        <div class="row g-4 mb-3">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center flex-wrap">
                                    <!-- Title -->
                                    <h3 class="mb-0">User Master</h3>

                                    <!-- Buttons -->
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-danger" id="Btn_ExportToExcelUserId">Export File</button>
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserMasterModal" id="Btn_AddUser">
                                            <i class="align-bottom me-1"></i> Add User
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Second Row: Search Textbox and Buttons -->
                        <div class="col-12">
                            <div class="d-flex align-items-center gap-2">
                                <input type="text" class="form-control searchpage" name="search" placeholder="Search..." id="Txt_SearchInputUserName" maxlength="50" />
                                <button type="button" class="btn btn-primary" id="Btn_SearchUserId">Search</button>
                                <button type="button" class="btn btn-secondary resetpage" id="Btn_ResetSearchUserId">Reset</button>
                            </div>
                            <!-- Hidden Edit Button -->
                            <button type="button" data-bs-toggle="modal" data-bs-target="#EditUserMasterModal" id="Btn_EditUser" style="display:none"></button>
                        </div>

                        <div class="table-responsive table-card mt-3 mb-1">
                            <table class="table align-middle table-nowrap" id="UserMasterTable_Id">
                                <thead class="table-light">
                                    <tr>
                                        <th class="sort fw-bold">
                                            <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllUserHeader" />
                                        </th>
                                        <th class="sort fw-bold" data-sort="srno">SR No</th>
                                        <th class="sort fw-bold" data-sort="action">Action</th>
                                        <th class="sort fw-bold" data-sort="tenantname">Tenant Name</th>
                                        <th class="sort fw-bold" data-sort="user_name">User Name</th>
                                        <th class="sort fw-bold" data-sort="name">Mobile No</th>
                                        <th class="sort fw-bold" data-sort="name">Branch Name</th>
                                        <th class="sort fw-bold" data-sort="name">Role Name</th>
                                        <th class="sort fw-bold" data-sort="status">Status</th>

                                    </tr>
                                </thead>
                                <tbody class="form-check-all">
                                </tbody>
                            </table>
                        </div>
                        @* THIS PARTIAL VIEW USED FOR PAGGINATION *@
                        @await Html.PartialAsync("Sections/Menu/_pagination")
                    </div>
                </div><!-- end card -->
            </div>
            <!-- end col -->
        </div>
        <!-- end col -->
    </div>

    <!-- Modal for Adding Product -->
    <div class="modal fade" id="addUserMasterModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProductModalLabel">Add User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="ClearAllValue()"></button>
                </div>
                <div class="modal-body">
                    <!-- Modal Form for adding a new product group -->
                    @using (Html.BeginForm("SaveAddUser", "UserMapping"))
                    {
                        <div class="row px-3">
                            <label class="form-label">Tenant <span style="color:red;font-weight:800">*</span></label>
                            <select name="TenantID" id="Select_TenantID" class="form-control" required>
                                @foreach (var item in ViewBag.TenantID)
                                {
                                    <option value="@item["id"]">@item["tenant_name"]</option>
                                }
                            </select>
                        </div>

                        <div class="row px-3 mt-3">
                            <label class="form-label">User Name<span style="color:red;font-weight:800">*</span></label>
                            <input type="text" class="form-control" name="UserName" id="Txt_UserName" required maxlength="50" />
                            <span id="WarnUserNameId" style="display:none"></span>
                        </div>

                        <div class="row px-3 mt-3">
                            <label class="form-label">Mobile Number<span style="color:red;font-weight:800">*</span></label>
                            <input type="text" class="form-control numberOnly" name="Mobileno" id="Txt_MobileNumberId" required minlength="10" maxlength="10" />
                            <span id="WarnMobileId" style="display:none"></span>
                        </div>


                        <div class="row px-3">
                            <label class="form-label">Role<span style="color:red;font-weight:800">*</span></label>
                            <select name="Role" id="Select_RoleID" class="form-control" required>
                                <option value="">-- Please Select Role--</option>
                                @foreach (var role in ViewBag.Role)
                                {
                                    <option value="@role["id"]">@role["role_name"]</option>
                                }
                            </select>
                        </div>
                        <div class="row px-3 mt-3">
                            <label class="form-label">Branch<span style="color:red;font-weight:800">*</span></label>
                            <select name="BarnchId" id="Select_BranchId" class="form-control" required>
                                <option value="">-- Please Select Branch --</option>
                                @foreach (var item in ViewBag.BranchData)
                                {
                                    <option value="@item["id"]">@item["branch_name"]</option>
                                }
                            </select>
                        </div>
                        <div class="row px-3 mt-3">
                            <label class="form-label">Status <span style="color:red;font-weight:800">*</span></label>
                            <div class="row pt-2">
                                <div class="col-md-3">
                                    <input type="radio" class="form-check-input" id="RadioIsActive" name="IsActive" value="1" checked required />
                                    <label> Active</label>&nbsp;
                                </div>
                                <div class="col-md-4">
                                    <input type="radio" class="form-check-input" id="RadioIsDeactive" name="IsActive" value="0" required>&nbsp;
                                    <label> Deactive</label>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="d-flex justify-content-end gap-2 px-3">
                            <div>
                                <button type="submit" class="btn btn-primary" id="Btn_SubmitId">
                                    <i class="align-bottom me-1"></i> Add
                                </button>
                            </div>
                            <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>


    <!-- Modal for Editing Product -->
    <div class="modal fade" id="EditUserMasterModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User Data</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick=ClearAllValue()></button>
                </div>
                <div class="modal-body">
                    <!-- Modal Form for editing -->
                    @using (Html.BeginForm("SaveEditUser", "UserMapping"))
                    {
                        <input type="hidden" id="RecordId" name="UpdateRecordId" />
                        <div class="row px-3">
                            <label class="form-label">Tenant<span style="color:red;font-weight:800">*</span></label>
                            <select name="TenantID" id="UpdateSelect_TenantID" class="form-control" required>
                                @foreach (var item in ViewBag.TenantID)
                                {
                                    <option value="@item["id"]">@item["tenant_name"]</option>
                                }
                            </select>
                        </div>

                        <div class="row px-3 mt-3">
                            <label class="form-label">User Name<span style="color:red;font-weight:800">*</span></label>
                            <input type="text" class="form-control" name="UserName" id="UpdateTxt_UserName" required maxlength="50" />
                            <span id="WarnUserNameId" style="display:none"></span>
                        </div>

                        <div class="row px-3 mt-3">
                            <label class="form-label">Mobile Number<span style="color:red;font-weight:800">*</span></label>
                            <input type="text" class="form-control numberOnly" name="Mobileno" id="UpdateTxt_MobileNumberId" required minlength="10" maxlength="10" />
                            <span id="UpdateWarnMobileId" style="display:none"></span>
                        </div>


                        <div class="row px-3">
                            <label class="form-label">Role<span style="color:red;font-weight:800">*</span></label>
                            <select name="Role" id="UpdateSelect_RoleID" class="form-control" required>
                                <option value="">-- Please Select Role--</option>
                                @foreach (var role in ViewBag.Role)
                                {
                                    <option value="@role["id"]">@role["role_name"]</option>
                                }
                            </select>
                        </div>
                        <div class="row px-3 mt-3">
                            <label class="form-label">Branch<span style="color:red;font-weight:800">*</span></label>
                            <select name="BarnchId" id="UpdateSelect_BranchId" class="form-control" required>
                                <option value="">-- Please Select Branch --</option>
                                @foreach (var item in ViewBag.BranchData)
                                {
                                    <option value="@item["id"]">@item["branch_name"]</option>
                                }
                            </select>
                        </div>
                        <div class="row px-3 mt-3">
                            <label class="form-label">Status <span style="color:red;font-weight:800">*</span></label>
                            <div class="row pt-2">
                                <div class="col-md-3">
                                    <input type="radio" class="form-check-input" id="UpdateRadioIsActive" name="IsActive" value="1" checked required />
                                    <label> Active</label>&nbsp;
                                </div>
                                <div class="col-md-4">
                                    <input type="radio" class="form-check-input" id="UpdateRadioIsDeactive" name="IsActive" value="0" required>&nbsp;
                                    <label> Deactive</label>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="d-flex justify-content-end gap-2 px-3">
                            <div>
                                <button type="submit" class="btn btn-primary" id="Btn_UpdateId">
                                    <i class="align-bottom me-1"></i> Update
                                </button>
                            </div>
                            <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for History Details -->
    <div class="modal fade" id="HistoryModaluser" tabindex="-1" aria-labelledby="HistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">History Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="table-responsive table-card mt-3 mb-1">
                        <table class="table align-middle table-nowrap" id="UserHistorytable-id">
                            <thead class="table-light">
                                <tr>
                                    <th>Action</th>
                                    <th>Tenant Name</th>
                                    <th>User Name</th>
                                    <th>Mobile No</th>
                                    <th>Branch Name</th>
                                    <th>Role Name</th>
                                    <th>Status</th>
                                    <th>Ip Address</th>
                                   @*  <th>Created At</th>
                                    <th>Created By</th> *@
                                    <th>Updated At</th>
                                    <th>Updated By</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>


    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>

        // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        function ShowErrorMsg(message) {
            Swal.fire({
                //title: 'Good job!',
                text: message,
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-primary waves-effect waves-light'
                },
                buttonsStyling: false
            });

        }

        function loadPageData(page, rowsToShow) {
            GetUserData(page, $('#ShowRowid').val());


        }
        // Function to update the Select All checkbox state based on individual checkbox selections
        function updateSelectAllCheckboxState() {
            var table = $("#UserMasterTable_Id");
            var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
            table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
        }


        var selectedRowIds = [];
        var SearchText;

        $(document).ready(function () {

            GetUserData(1, $('#ShowRowid').val());

            $(".Checkbox_SelectAllHeader").on("change", function () {
                var isChecked = $(this).prop('checked');  // Get the checked state of the header checkbox
                var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

                // Select or deselect all row checkboxes based on the header checkbox state
                table.find(".RowCheckbox").prop('checked', isChecked);

                // Update the selectedRowIds array based on the "Select All" checkbox
                if (isChecked) {
                    // Add all row IDs to the selectedRowIds array for the specific table
                    table.find(".RowCheckbox").each(function () {
                        var rowId = $(this).data('id');
                        if (rowId && !selectedRowIds.includes(rowId)) {
                            selectedRowIds.push(rowId);
                        }
                    });
                } else {

                    table.find(".RowCheckbox").each(function () {
                        var rowId = $(this).data('id');
                        if (rowId) {
                            // Only remove the rowId from the selectedRowIds array if the checkbox is unchecked
                            selectedRowIds = selectedRowIds.filter(function (id) {
                                return id !== rowId;
                            });
                        }
                    });
                }
            });

            // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
            if ('@TempData["Message"]' !== "") {
                ShowErrorMsg('@TempData["Message"]');
            }

        @{
            TempData.Remove("Message");  // Remove specific key "Message" from TempData
        }
                function sendSelectedRowIds() {
                    // Check if there are any selected row IDs
                    var searchValue = SearchText;
                    var rowIdsString = selectedRowIds.join(',');
                    // Make an AJAX request to send the data to the controller action
                    $.ajax({
                        type: "POST",
                        url: "/UserMapping/ExportdataExcelUser",
                        data: {
                            selectedRowIds: rowIdsString,
                            searchValue: searchValue
                        },
                        success: function (response) {
                            if (response.success) {
                                // Decode Base64 to binary string
                                var byteCharacters = atob(response.fileContent); // Decode Base64 to binary string
                                var byteArray = new Uint8Array(byteCharacters.length);

                                for (var i = 0; i < byteCharacters.length; i++) {
                                    byteArray[i] = byteCharacters.charCodeAt(i); // Convert to byte array
                                }

                                // Create a blob from the byte array
                                var blob = new Blob([byteArray], { type: response.fileType });

                                // Create a link element for downloading
                                var link = document.createElement('a');
                                link.href = URL.createObjectURL(blob);
                                link.download = response.fileName; // Set the download file name
                                link.click();
                            } else {
                                ShowErrorMsg(response.message)
                            }
                        },
                        error: function (xhr, status, error) {
                            // Handle the error (failure)
                            console.error('Error occurred while sending data to the server:', error);

                            // Optionally, display an error message
                            alert('An error occurred while processing your request.');
                        }
                    });

                }

            // EXPORT TO EXCEL BUTTON FUNCTIONALITY
            $("#Btn_ExportToExcelUserId").click(function () {

                sendSelectedRowIds();

            });

            $('#Btn_SearchUserId').on('click', function () {
                SearchText = $('#Txt_SearchInputUserName').val();
                GetUserData(1, $('#ShowRowid').val());
            });

            $("#Btn_ResetSearchUserId").on("click", function () {
                location.reload();
            });


        });

        function EditUserId(id, Flag)
        //this function used for edit User    function EditCityId(id)
        {
            $.ajax({
                type: "POST",
                url: "/UserMapping/EditUser",
                data: {
                    ID: id,
                    Flag: Flag
                },
                success: function (data) {
                    var res = JSON.parse(data);
                    var UserData = res["UserData"]
                    var Flag = res["Flag"]
                    //ths is for diable braches on edit
                    const value = document.getElementById('UpdateSelect_RoleID').value;
                    if (value == 3) {
                        $('#UpdateSelect_BranchId').prop("disabled", true)

                    }
                    else {
                        $('#UpdateSelect_BranchId').prop("disabled", false)
                    }

                    if (Flag === "Show") {
                        $("#Btn_UpdateId").prop("disabled", false);
                    }
                    else {
                        $("#Btn_UpdateId").prop("disabled", true);
                    }

                    // $("#addProductModalLabel").text("Edit Country Details")
                    document.getElementById('RecordId').value = UserData[0]["id"];
                    document.getElementById('UpdateSelect_TenantID').value = UserData[0]["tenant_id"];
                    document.getElementById('UpdateTxt_UserName').value = UserData[0]["user_name"];
                    document.getElementById('UpdateTxt_MobileNumberId').value = UserData[0]["mobile_no"];
                    document.getElementById('UpdateSelect_RoleID').value = UserData[0]["role_id"];
                    document.getElementById('UpdateSelect_BranchId').value = UserData[0]["branch_id"];

                    //THIS IS USED FOR CHECKED ACTIVE INACTIVE
                    if (UserData[0]["is_active"] == "1") {
                        $("#UpdateRadioIsActive").prop("checked", true);
                    } else {
                        $("#UpdateRadioIsDeactive").prop("checked", true);
                    }

                    $("#Btn_EditUser").click();

                },
                error: function (response) {
                    console.log("error")

                }
            });
        }

        // This is for dropdown disable when 'ho' (value 3) is selected
        $('#Select_RoleID, #UpdateSelect_RoleID').on("change", function () {

            const inputFieldId = $(this).attr('id'); // Get the ID of the field that triggered the event
            const value = $(this).val(); // Get the selected value
            console.log(value);

            if (value == 3) {
                // Disable both branch dropdowns
                $('#Select_BranchId, #UpdateSelect_BranchId').prop("disabled", true);
            } else {
                // Enable both branch dropdowns
                $('#Select_BranchId, #UpdateSelect_BranchId').prop("disabled", false);
            }

        });

        $('#Txt_MobileNumberId, #UpdateTxt_MobileNumberId').on("change paste", function () {

            const inputFieldId = $(this).attr('id'); // Get the ID of the field that triggered the event
            const value = $(this).val();

            $.ajax({
                type: "POST",
                url: "/UserMapping/CheckDuplicateRecord",
                data: {
                    ColName: "mobile_no",
                    Username: value
                },
                success: function (data) {
                    if (data > 0) {
                        // Clear the field that triggered the event
                        $('#' + inputFieldId).val("");
                        console.log(inputFieldId);
                        // Show warning for the respective field
                        if (inputFieldId === "Txt_MobileNumberId") {
                            $("#WarnMobileId").css({ "display": "block", "color": "red" }).text("Mobile Number Already Exists...");
                        } else if (inputFieldId === "UpdateTxt_MobileNumberId") {
                            $("#UpdateWarnMobileId").css({ "display": "block", "color": "red" }).text("User Name Already Exists...");
                        }
                    } else {
                        $("#WarnMobileId").css({ "display": "none" });
                        $("#UpdateWarnMobileId").css({ "display": "none" });
                    }
                },
                error: function (response) {
                    console.error("Error during AJAX request:", response);
                }
            });
        });

        //this function is used for clear div
        function ClearAllValue() {

            $("#Txt_UserName").val("");
            $("#Txt_MobileNumberId").val("");
            $("#Select_RoleID").val("");
            $("#Select_BranchId").val("");
            $("#WarnMobileId").css({ "display": "none" });
            $("#UpdateWarnMobileId").css({ "display": "none" });

        }

        //this is for state dropdown
        $('#Select_CountryID').on("change", function () {
            const countryId = $('#Select_CountryID').val();  // Get the selected CountryId
            console.log(countryId);

            if (countryId) {
                $.ajax({
                    type: "POST",
                    url: "/TenantMaster/GetStateName",
                    data: {
                        CountryId: countryId
                    },
                    success: function (response) {
                        // Parse the response (assuming the response is a JSON string)
                        var res = JSON.parse(response);  // Parse the JSON string
                        console.log(res);  // Log the parsed response

                        // Access the "Table" array from the response
                        var stateTable = res.Table;  // Access the "Table" array

                        // Check if the "Table" array has any items
                        if (stateTable && stateTable.length > 0) {
                            // Clear the state dropdown
                            $('#Select_StateID').empty();
                            $('#Select_StateID').append('<option value="">Select State</option>');

                            // Loop through the rows of the "Table" array and populate the dropdown
                            stateTable.forEach(function (row) {
                                // Append options to the dropdown with `id` as the value and `state_name` as the text
                                $('#Select_StateID').append(`<option value="${row.id}">${row.state_name}</option>`);
                            });
                        } else {
                            // If no states are available, append a "No states available" option
                            $('#Select_StateID').empty();
                            $('#Select_StateID').append('<option value="">No states available</option>');
                        }
                    },
                    error: function (response) {
                        console.error("Error during AJAX request:", response);
                    }
                });
            } else {
                // If no country is selected, clear the state dropdown
                $('#Select_StateID').empty();
                $('#Select_StateID').append('<option value="">Select State</option>');
            }
        });

        function GetUserData(pageNumber, pageSize) {
            const data = {
                PageNumber: pageNumber,
                PageSize: pageSize,
                SearchText: SearchText // Replace with actual search input or variable
            };

            $.ajax({
                type: "POST",
                url: "/UserMapping/GetUserData", // Replace with your backend endpoint
                contentType: "application/json",
                data: JSON.stringify(data),
                success: function (response) {
                    const userData = response.UserData;
                    const paginationInfo = response.PaginationInfo;

                    // Bind the data to the table
                    BindUserTableData(userData, paginationInfo);
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching user data:", xhr.responseText);

                    $("#UserMasterTable_Id tbody").empty();
                    $("#UserMasterTable_Id tbody").html(`
                                <tr>
                                    <td colspan="9" style="text-align: center;">No Data Available</td>
                                </tr>
                            `);
                    generatePagination(1, $('#ShowRowid').val()); // Handle pagination for empty data
                }
            });
        }

        function BindUserTableData(res, paginationInfo) {
            $("#UserMasterTable_Id tbody").empty(); // Clear existing rows

            let srNo = 1;
            if (paginationInfo && paginationInfo.length > 0) {
                const totalPages = paginationInfo[0].TotalPages;
                const pageNumber = paginationInfo[0].PageNumber;
                const pageSize = paginationInfo[0].PageSize;
                srNo = (pageNumber - 1) * pageSize + 1;

                generatePagination(totalPages, pageNumber); // Generate pagination dynamically
            } else {
                console.error("PaginationInfo is missing or incorrect.");
            }

            if (Array.isArray(res) && res.length > 0) {
                res.forEach(item => {
                    const userId = item.id.toString();

                    const isChecked = selectedRowIds.some(id => id.toString() === userId);

                    const row = `
                                <tr id="${item.id}">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input RowCheckbox" type="checkbox" data-id="${item.id}" id="UserRowCheckBoxId_${item.id}" ${isChecked ? 'checked' : ''}>
                                        </div>
                                    </td>
                                    <td>${srNo}</td>
                                    <td>
                                        <div class="d-flex gap-2">
                                                    <div class="history">
                                                                        <span class="btn btn-sm btn-warning" style="margin:1px; cursor:pointer;" title="History" data-bs-toggle="modal" data-bs-target="#HistoryModaluser" id="Btn_userHistoryId" onclick="ShowHistory(${item.id})">
                                                                <i class="fas fa-history"></i>
                                                            </span>
                                                        </div>
                                        </div>
                                    </td>
                                    <td>${item.tenant_name || ''}</td>
                                    <td>${item.user_name || ''}</td>
                                    <td>${item.mobile_no || ''}</td>
                                    <td>${item.branch_name || ''}</td>
                                    <td>${item.role_name || ''}</td>
                                    <td>${item.is_active === 1 ? "Active" : "Deactive"}</td>
                                </tr>
                            `;

                    $("#UserMasterTable_Id tbody").append(row);

                    srNo++;
                });
            } else {
                $("#UserMasterTable_Id tbody").html(`
                            <tr>
                                <td colspan="9" style="text-align: center;">No Data Available</td>
                            </tr>
                        `);
            }

            updateSelectAllCheckboxState(); // Update the "Select All" checkbox state
        }

        // THIS FUNCTION IS USED TO SHOW HISTORY DETAILS
        function ShowHistory(id) {

            $.ajax({
                type: "POST",
                url: "/UserMapping/GetHistoryData",
                data: { id: id },
                success: function (data) {
                    var res = JSON.parse(data);
                    var HistoryData = res["HistoryData"];

                    $("#UserHistorytable-id tbody").empty();


                    if (HistoryData.length > 0) {

                        HistoryData.forEach(function (item) {
                            var row = '<tr>';
                            row += '<td>' + (item.action_name === 'A' ? 'Add' : item.action_name === 'U' ? 'Update' : 'Delete') + '</td>';
                            row += '<td>' + (item.tenant_name || '') + '</td>';
                            row += '<td>' + (item.user_name || '') + '</td>';
                            row += '<td>' + (item.mobile_no || '') + '</td>';
                            row += '<td>' + (item.branch_name || '') + '</td>';
                            row += '<td>' + (item.role_name || '') + '</td>';
                            row += '<td>' + (item.is_active == '1' ? 'Active' : 'Deactive') + '</td>';
                            row += '<td>' + (item.ip_address || '') + '</td>';
                            // row += '<td>' + (item.created_at || '') + '</td>';
                            // row += '<td>' + (item.created_by || '') + '</td>';
                            row += '<td>' + (item.updated_at ? item.updated_at.replace('T', ' ') : '') + '</td>';
                            row += '<td>' + (item.updated_by || '') + '</td>';
                            row += '</tr>';

                            $("#UserHistorytable-id tbody").append(row); // This is correct
                        });
                    } else {
                        // If no data, show a message (optional)
                        $("#UserHistorytable-id tbody").append('<tr><td colspan="13" class="text-center">No history available</td></tr>');
                    }
                },
                error: function (response) {
                    console.error("Error during AJAX request:", response);
                }
            });
        }

    </script>
}
