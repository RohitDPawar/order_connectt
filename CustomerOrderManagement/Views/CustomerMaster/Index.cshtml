@{
    int srno = 1;
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="listjs-table" id="customerList">
                    <div class="row g-4 mb-3">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center flex-wrap">
                                <!-- Title -->
                                <h3 class="mb-0">Customer Master</h3>

                                <!-- Buttons -->
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#ImportCustomerModalId" id="Btn_ImportCustomerData">
                                        <i class="ri-upload-cloud-line ri-18px me-2"></i> Import
                                    </button>
                                    <button type="button" class="btn btn-danger" id="Btn_ExportToExcelCustomerId">Export File</button>

                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCustomerMasterModal" id="Btn_AddCustomer" onclick="ClearAllValue()">
                                        <i class="align-bottom me-1"></i> Add Customer
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Second Row: Search Textbox and Buttons -->
                    <div class="col-12">
                        <div class="d-flex align-items-center gap-2">
                            <input type="text" class="form-control" name="search" placeholder="Search..." id="Txt_SearchInputCustomerName" />
                            <button type="button" class="btn btn-primary" id="Btn_SearchCustomerNameId">Search</button>
                            <button type="button" class="btn btn-secondary" id="Btn_ResetSearchCustomerId">Reset</button>
                        </div>
                        <!-- Hidden Edit Button -->
                        <button type="button" data-bs-toggle="modal" data-bs-target="#EditCustomerMasterModal" id="Btn_EditCustomer" style="display:none"></button>
                    </div>

                    <div class="table-responsive table-card mt-3 mb-1">
                        <table class="table align-middle table-nowrap" id="CustomerMasterTable_Id">
                            <thead class="table-light">
                                <tr>
                                    <th class="sort fw-bold">
                                        <input type="checkbox" class="form-check-input Checkbox_SelectAllHeader" id="Checkbox_SelectAllCustomerHeader" />
                                    </th>
                                    <th class="sort fw-bold" data-sort="srno">SR No</th>
                                    <th class="sort fw-bold" data-sort="action">Action</th>
                                    <th class="sort fw-bold" data-sort="country_id">Tenant Name</th>
                                    <th class="sort fw-bold" data-sort="state_id">Customer Name</th>
                                    <th class="sort fw-bold" data-sort="name">Mobile No</th>
                                    <th class="sort fw-bold" data-sort="name">Email ID</th>
                                    <th class="sort fw-bold" data-sort="name">Address</th>
                                    <th class="sort fw-bold" data-sort="name">Area Description</th>
                                    <th class="sort fw-bold" data-sort="name">Pincode</th>
                                    <th class="sort fw-bold" data-sort="name">Country</th>
                                    <th class="sort fw-bold" data-sort="name">State</th>
                                    <th class="sort fw-bold" data-sort="name">City</th>
                                    <th class="sort fw-bold" data-sort="name">Remark</th>
                                    <th class="sort fw-bold" data-sort="status">Status</th>

                                </tr>
                            </thead>
                            <tbody class="form-check-all">
                            </tbody>
                        </table>
                    </div>
                    @* THIS PARTIAL VIEW USED FOR PAGGINATION *@
                    @await Html.PartialAsync("Sections/Menu/_pagination")
                </div>
            </div><!-- end card -->
        </div>
        <!-- end col -->
    </div>
    <!-- end col -->
</div>

<!-- Modal for Adding Product -->
<div class="modal fade" id="addCustomerMasterModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add Customer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="ClearAllValue()"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form for adding a new product group -->
                @using (Html.BeginForm("SaveAddCustomer", "CustomerMaster"))
                {
                    <div class="row px-3">
                        <label class="form-label">Tenant  <span style="color:red;font-weight:800">*</span></label>
                        <select name="TenantID" id="Select_TenantID" class="form-control" required>
                            @foreach (var item in ViewBag.TenantID)
                            {
                                <option value="@item["id"]">@item["tenant_name"]</option>
                            }
                        </select>
                    </div>
                    <div class="row px-3">
                        <label class="form-label">Customer Name<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control onlycharacterandspace" name="CustomerName" id="Txt_CustomerNameId" required minlength="3" maxlength="100" />
                        <span id="WarnADDCustomerNameId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Mobile Number<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control numberOnly" name="Mobileno" id="Txt_MobileNumberId" required minlength="10" maxlength="10" />
                        <span id="WarnMobileId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Email ID<span style="color:red;font-weight:800">*</span></label>
                        <input type="email" class="form-control " name="EmailID" id="Txt_EmailId" required maxlength="50" />
                        <span id="WarnEmailId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Address<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control " name="Address" id="Txt_AddressId" required maxlength="100" />
                        <span id="WarnAddressId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Area<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control " name="Area" id="Txt_AreaId" required maxlength="100" />
                        <span id="WarnAreaId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">PinCode<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control numberOnly" name="Pincode" id="Txt_PincodeId" required maxlength="6" />
                        <span id="WarnPincodeId" style="display:none"></span>
                    </div>
					<div class="row px-3">
						<label class="form-label">Country Name<span style="color:red;font-weight:800">*</span></label>
						<input type="text" class="form-control" name="CountryID1" id="Select_CountryID" placeholder="Type Country name..." required />
						<div id="suggestions" class="list-group mt-1"></div>
						<input type="hidden" name="CountryID" id="CountryId" value="" />
					</div>
						<div class="row px-3 mt-3">
						<label class="form-label">State Name<span style="color:red;font-weight:800">*</span></label>
						<input type="text" class="form-control" name="StateID1" id="Select_StateID" placeholder="Type State name..." required />
						<div id="suggestions1" class="list-group mt-1"></div>
						<input type="hidden" name="StateID" id="StateId" value="" />
					</div>
						<div class="row px-3 mt-3">
						<label class="form-label">City Name<span style="color:red;font-weight:800">*</span></label>
						<input type="text" class="form-control" name="CityID1" id="Select_CityID" placeholder="Type State name..." required />
						<div id="suggestions2" class="list-group mt-1"></div>
						<input type="hidden" name="CityID" id="CityNameId" value="" />
					</div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Remark</label>
                        <input type="text" class="form-control" name="remark" id="Txt_RemarkId" maxlength="200" />
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Status<span style="color:red;font-weight:800">*</span></label>
                        <div class="row pt-2">
                            <div class="col-md-3">
                                <input type="radio" class="form-check-input" id="RadioIsActive" name="IsActive" value="1" checked required />
                                <label> Active</label>&nbsp;
                            </div>
                            <div class="col-md-4">
                                <input type="radio" class="form-check-input" id="RadioIsDeactive" name="IsActive" value="0" required>&nbsp;
                                <label> Deactive</label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="d-flex justify-content-end gap-2 px-3">
                        <div>
							<button type="submit" class="btn btn-primary Btn_preventMultiEnter" id="Btn_SubmitId" onclick="return ValidateData()">
                                <i class="align-bottom me-1"></i> ADD
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<!-- Modal for Editing Product -->
<div class="modal fade preventMultipleEnter" id="EditCustomerMasterModal" tabindex="-1" aria-labelledby="editCustomerModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCustomerModalLabel">Edit Customer Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick=ClearAllValue()></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form for editing -->
                @using (Html.BeginForm("SaveEditCustomer", "CustomerMaster"))
                {
                    <input type="hidden" id="RecordId" name="UpdateRecordId" />
                    <div class="row px-3">
                        <label class="form-label">Tenant ID <span style="color:red;font-weight:800">*</span></label>
                        <select name="TenantID" id="Update_TenantID" class="form-control" required>
                            @foreach (var item in ViewBag.TenantID)
                            {
                                <option value="@item["id"]">@item["tenant_name"]</option>
                            }
                        </select>
                    </div>
                    <div class="row px-3">
                        <label class="form-label">Customer Name<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control onlyCharacterAndDash" name="CustomerName" id="UpdateTxt_CustomerNameId" required minlength="3" maxlength="100" />
                        <span id="WarnUpdateCustomerNameId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Mobile Number<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control numberOnly" name="Mobileno" id="UpdateTxt_MobileNumberId" required minlength="10" maxlength="10" />
                        <span id="UpdateWarnMobileId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Email ID<span style="color:red;font-weight:800">*</span></label>
                        <input type="email" class="form-control " name="EmailID" id="UpdateTxt_EmailId" required maxlength="50" />
                        <span id="WarnEmailId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Address<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control " name="Address" id="UpdateTxt_AddressId" required maxlength="100" />
                        <span id="WarnAddressId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Area<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control " name="Area" id="UpdateTxt_AreaId" required maxlength="100" />
                        <span id="WarnAreaId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">PinCode<span style="color:red;font-weight:800">*</span></label>
                        <input type="text" class="form-control numberOnly" name="Pincode" id="UpdateTxt_PincodeId" required maxlength="6" />
                        <span id="WarnPincodeId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Country<span style="color:red;font-weight:800">*</span></label>
                        <select name="CountryID" id="UpdateTxt_Country" class="form-control" required>
                            <option value="">-- Please Select Country --</option>
                            @foreach (var country in ViewBag.CountryID)
                            {
                                <option value="@country["id"]">@country["country_name"]</option>
                            }
                        </select>
                        <span id="WarnCountryId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">State<span style="color:red;font-weight:800">*</span></label>
                        <select name="StateID" id="Update_StateID" class="form-control" required>
                            <option value="">-- Please Select State --</option>
                            @foreach (var state in ViewBag.StateID)
                            {
                                <option value="@state["id"]">@state["state_name"]</option>
                            }
                        </select>
                        <span id="WarnStateId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">City<span style="color:red;font-weight:800">*</span></label>
                        <select name="CityID" id="Update_CityID" class="form-control" required>
                            <option value="">-- Please Select City --</option>
                            @foreach (var city in ViewBag.CityID)
                            {
                                <option value="@city["id"]">@city["city_name"]</option>
                            }
                        </select>
                        <span id="WarnCityId" style="display:none"></span>
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Remark</label>
                        <input type="text" class="form-control onlyCharacterAndDash" name="remark" id="UpdateTxt_RemarkId" maxlength="200" />
                    </div>
                    <div class="row px-3 mt-3">
                        <label class="form-label">Status<span style="color:red;font-weight:800">*</span></label>
                        <div class="row pt-2">
                            <div class="col-md-3">
                                <input type="radio" class="form-check-input" id="UpdateRadioIsActive" name="IsActive" value="1" checked required />
                                <label> Active</label>&nbsp;
                            </div>
                            <div class="col-md-4">
                                <input type="radio" class="form-check-input" id="UpdateRadioIsDeactive" name="IsActive" value="0" required>&nbsp;
                                <label> Deactive</label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="d-flex justify-content-end gap-2 px-3">
                        <div>
                            <button type="submit" class="btn btn-primary d-grid" id="Btn_UpdateId">
                                <i class="align-bottom me-1"></i> Update
                            </button>
                        </div>

                        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal for import file -->
<div class="modal fade" id="ImportCustomerModalId" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUploadfileLabel">Upload File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row px-3 mt-3 gap-2">
                    <!-- Wrap this section with a form to send data -->
                    @using (Html.BeginForm("UploadCustomerMaster", "CustomerMaster", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
                    {
                        <label class="form-label">Select File<span style="color:red;font-weight:500">*</span></label>
                        <div class="d-flex">
                            <input type="file" class="form-control" name="file" id="file_Id" required accept=".xlsx" />
                        </div>
                        <span id="WarnbrowseId" style="color:red; display:none;">Please upload only .xlsx file extension</span>

                        <div id="loadingSpinner" style="display: none; text-align: center;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>Uploading file...</div>
                        </div>
                        <div class="d-flex justify-content-end align-items-end px-3 m-3 gap-2">
                            <button type="button" class="btn btn-outline-primary d-flex align-items-center" id="samplesheetbtn">
                                <i class="align-bottom me-1"></i> Download Format
                            </button>
                            <button type="submit" class="btn btn-primary d-grid" id="uploadBtn">
                                <i class="align-bottom me-1"></i> Upload
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for History Details -->
<div class="modal fade" id="HistoryModalcustomer" tabindex="-1" aria-labelledby="HistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">History Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="table-responsive table-card mt-3 mb-1">
                    <table class="table align-middle table-nowrap" id="customerHistorytable-id">
                        <thead class="table-light">
                            <tr>
                                <th>Action</th>
                                <th>Tenant Name</th>
                                <th>Customer Name</th>
                                <th>Mobile No</th>
                                <th>Email ID</th>
                               @*  <th>Address</th>
                                <th>Area Description</th>
                                <th>Pincode</th>
                                <th>Country</th>
                                <th>State</th>
                                <th>City</th> *@
                                <th>Remark</th>
                                <th>Status</th>
                                <th>Ip Address</th>
                               @*  <th>Created At</th>
                                <th>Created By</th> *@
                                <th>Updated At</th>
                                <th>Updated By</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
	//start vina code
	 let CountryGroupRecords = [];
	 let StateGroupRecords =[];
	 let CityGroupRecords =[];
		 // THIS IS TO VALIDATE CORRECT ITEM NAME IS DISPLAY
	 function ValidateData()
	 {
		  var countryid = $("#CountryId").val();
		  var stateid = $("#StateId").val();
		  var cityid =  $("#CityNameId").val();
		if ($("#CountryId").val() == "" || $("#StateId").val() == "" || $("#CityNameId").val() == "") {
			ShowWarning("Please fill all fields: Country, State, and City.");
			return false;
		}

				 else{
				 return true;
			 }
	 }
	 $(document).ready(function ()
	 {
			 //THIS FUNCTION IS USED TO SEARCH ON ITEM GROUP NAME TYPED
		  $('#Select_CountryID').on('keyup', function () {
			  let inp = $(this);
			  const searchTerm = inp.val().trim().toLowerCase();
				 let filteredResults = CountryGroupRecords.filter(city => {
				 let nameMatch = city.country_name.toLowerCase().includes(searchTerm);
			 return nameMatch;
			 });
			 renderCountrySuggestions(filteredResults, inp);
			 if ([2,4].includes(searchTerm.length))
			 {
				 loadCountryGroupData(searchTerm, inp);

			 }
		 });
		 $('#Select_StateID').on("keyup", function () {
		 let inp = $(this);
			  const searchTerm = inp.val().trim().toLowerCase();
				 let filteredResults = StateGroupRecords.filter(state => {
				 let nameMatch = state.state_name.toLowerCase().includes(searchTerm);
			 return nameMatch;
			 });
			 renderStateSuggestions(filteredResults, inp);
			 if ([2,4].includes(searchTerm.length))
			 {
				 loadStateGroupData(searchTerm, inp);
			 }
		 });
		$('#Select_CityID').on("keyup", function () {
		  let inp = $(this);
			   const searchTerm = inp.val().trim().toLowerCase();
				  let filteredResults = CityGroupRecords.filter(city => {
				  let nameMatch = city.city_name.toLowerCase().includes(searchTerm);
			  return nameMatch;
			  });
			  renderCitySuggestions(filteredResults, inp);
			  if ([2,4].includes(searchTerm.length))
			  {
				  loadCityGroupData(searchTerm, inp);
			  }
		  });

	 });
		 //THIS FUNCTION IS USED TO LOAD FILTERED COUNTRY GROUP
	 function loadCountryGroupData(searchTerm, inp)
	 {
			 $.ajax({
				 url: '/CustomerMaster/GetFilteredCountryGroups',
				 type: 'GET',
				 data: {

					 SearchItem: searchTerm
				 },
				 success: function (data) {



					 if (Array.isArray(data)) {
							 CountryGroupRecords = data;
						 renderCountrySuggestions(data, inp);
					 }
				 },
				 error: function (error) {
					 console.error("Error fetching customer data:", error);
				 }
			 });
	 }

	 //THIS FUNCTION IS USED TO LOAD STATE GROUP
	 function loadStateGroupData(searchTerm, inp)
	 {
		  var countryid = $("#CountryId").val();
			 $.ajax({
				 url: '/CustomerMaster/GetStateName',
				 type: 'GET',
				 data: {

					 SearchItem: searchTerm,
					 CountryId: countryid
				 },
				 success: function (data) {



					 if (Array.isArray(data)) {
							 StateGroupRecords = data;
						 renderStateSuggestions(data, inp);
					 }
				 },
				 error: function (error) {
					 console.error("Error fetching customer data:", error);
				 }
			 });
	 }

	  //THIS FUNCTION IS USED TO LOAD City GROUP
	  function loadCityGroupData(searchTerm, inp)
	  {
		   var stateid = $("#StateId").val();
			  $.ajax({
				  url: '/CustomerMaster/GetCityName',
				  type: 'GET',
				  data: {

					  SearchItem: searchTerm,
					   StateId: stateid
				  },
				  success: function (data) {



					  if (Array.isArray(data)) {
							  CityGroupRecords = data;
						  renderCitySuggestions(data, inp);
					  }
				  },
				  error: function (error) {
					  console.error("Error fetching customer data:", error);
				  }
			  });
	  }
	 // THIS FUNCTION IS USED TO RENDER THE FILTERED country SUGGESTIONS
	 function renderCountrySuggestions(data, inp)
		 {
			 const suggestionBox = document.getElementById('suggestions');
			 suggestionBox.innerHTML = ''; // Clear old suggestions

			 // Get and normalize input value (supports jQuery or native input)
			 const inputValue = (inp.val ? inp.val() : inp.value).trim().toLowerCase();

			 const filteredData = data.filter(item =>
					 item.country_name.toLowerCase().includes(inputValue)
			 );

			 if (filteredData.length === 0) {
				 const noResult = document.createElement('div');
				 noResult.classList.add('list-group-item', 'text-muted');
				 noResult.textContent = 'No matches found';
				 suggestionBox.appendChild(noResult);
				 return;
			 }

			 filteredData.forEach(item => {
				 const div = document.createElement('div');
				 div.classList.add('list-group-item', 'list-group-item-action');
					 div.textContent = item.country_name;

				 // Set a data attribute for ID
				 div.setAttribute('data-id', item.id);

				 div.addEventListener('click', function () {
						 const name = item.country_name;
					 const id = item.id;
					 if (inp.val) {
						 inp.val(name);
					 } else {
						 inp.value = name;
					 }
					 // You could also set it in a hidden input if needed:
					 const hiddenInput = document.getElementById('CountryId');
					 if (hiddenInput) hiddenInput.value = id;

					 suggestionBox.innerHTML = '';
				 });

				 suggestionBox.appendChild(div);
			 });
		 }
		  //THIS FUNCTION IS USED TO RENDER THE FILTERED state SUGGESTIONS
	 function renderStateSuggestions(data, inp)
		 {
			 const suggestionBox = document.getElementById('suggestions1');
			 suggestionBox.innerHTML = ''; // Clear old suggestions

			 // Get and normalize input value (supports jQuery or native input)
			 const inputValue = (inp.val ? inp.val() : inp.value).trim().toLowerCase();

			 const filteredData = data.filter(item =>
					 item.state_name.toLowerCase().includes(inputValue)
			 );

			 if (filteredData.length === 0) {
				 const noResult = document.createElement('div');
				 noResult.classList.add('list-group-item', 'text-muted');
				 noResult.textContent = 'No matches found';
				 suggestionBox.appendChild(noResult);
				 return;
			 }

			 filteredData.forEach(item => {
				 const div = document.createElement('div');
				 div.classList.add('list-group-item', 'list-group-item-action');
					 div.textContent = item.state_name;

				 // Set a data attribute for ID
				 div.setAttribute('data-id', item.id);

				 div.addEventListener('click', function () {
						 const name = item.state_name;
					 const id = item.id;
					 if (inp.val) {
						 inp.val(name);
					 } else {
						 inp.value = name;
					 }
					 // You could also set it in a hidden input if needed:
					 const hiddenInput = document.getElementById('StateId');
					 if (hiddenInput) hiddenInput.value = id;

					 suggestionBox.innerHTML = '';
				 });

				 suggestionBox.appendChild(div);
			 });
		 }

		   //THIS FUNCTION IS USED TO RENDER THE FILTERED CITY SUGGESTIONS
	  function renderCitySuggestions(data, inp)
		  {
			  const suggestionBox = document.getElementById('suggestions2');
			  suggestionBox.innerHTML = ''; // Clear old suggestions

			  // Get and normalize input value (supports jQuery or native input)
			  const inputValue = (inp.val ? inp.val() : inp.value).trim().toLowerCase();

			  const filteredData = data.filter(item =>
					  item.city_name.toLowerCase().includes(inputValue)
			  );

			  if (filteredData.length === 0) {
				  const noResult = document.createElement('div');
				  noResult.classList.add('list-group-item', 'text-muted');
				  noResult.textContent = 'No matches found';
				  suggestionBox.appendChild(noResult);
				  return;
			  }

			  filteredData.forEach(item => {
				  const div = document.createElement('div');
				  div.classList.add('list-group-item', 'list-group-item-action');
					  div.textContent = item.city_name;

				  // Set a data attribute for ID
				  div.setAttribute('data-id', item.id);

				  div.addEventListener('click', function () {
						  const name = item.city_name;
					  const id = item.id;
					  if (inp.val) {
						  inp.val(name);
					  } else {
						  inp.value = name;
					  }
					  // You could also set it in a hidden input if needed:
					   const hiddenInput = document.getElementById('CityNameId');
					  if (hiddenInput) hiddenInput.value = id;

					  suggestionBox.innerHTML = '';
				  });

				  suggestionBox.appendChild(div);
			  });
		  }
	// end vina code
    // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowWarning(message) {
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: 'warning',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });

    }

    $(document).ready(function () {

        // Handle the form submission using AJAX
        $("#uploadForm").submit(function (e) {
            e.preventDefault(); // Prevent default form submission
            var fileInput = $('#file_Id')[0];
            var file = fileInput.files[0]; // Get the first file from the input

            // Check if a file was selected
            if (!file) {
                alert("Please select a file.");
                return;
            }

            // Validate the file type (allow only .csv, .xls, .xlsx)
            var allowedExtensions = /(\.csv|\.xls|\.xlsx)$/i;
            if (!allowedExtensions.exec(file.name)) {
                $('#WarnbrowseId').show(); // Show warning message
                return; // Stop form submission if the file type is not valid
            } else {
                $('#WarnbrowseId').hide();
            }
            var formData = new FormData(this); // Create FormData object from the form
            showSpinner();
            $.ajax({
                url: '@Url.Action("UploadCustomerMaster", "CustomerMaster")', // Your controller action URL
                type: 'POST',
                data: formData,
                processData: false, // Don't process the data
                contentType: false, // Don't set content type header
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        // Decode Base64 to binary string
                        var byteCharacters = atob(response.fileContent); // Decode Base64 to binary string
                        var byteArray = new Uint8Array(byteCharacters.length);

                        for (var i = 0; i < byteCharacters.length; i++) {
                            byteArray[i] = byteCharacters.charCodeAt(i); // Convert to byte array
                        }

                        // Create a blob from the byte array
                        var blob = new Blob([byteArray], { type: response.fileType });

                        // Create a link element for downloading
                        var link = document.createElement('a');
                        link.href = URL.createObjectURL(blob);
                        link.download = response.fileName; // Set the download file name
                        link.click(); // Trigger the download

                        $('#file_Id').val(''); // Clear the file input (if it exists)
                        hideSpinner(); // Hide the spinner when there's an error
                        // Close the modal (if present)
                        $('#importFileModal2').modal('hide');
                        ShowErrorMsg("File Imported Succesfully....", "1")
                        setTimeout(function () {
                            location.reload();
                        }, 3000); // 3000 milliseconds = 3 seconds
                    } else {
                        $('#file_Id').val('');
                        //alert("Error: " + response.message);
                        ShowWarning(response.message)
                        hideSpinner();
                    }
                },
                error: function (xhr, status, error) {
                    //alert("Error uploading file. Please try again.");
                    ShowWarning("Error uploading file. Please try again.....")
                    hideSpinner(); // Hide the spinner when there's an error
                }
            });

        });

        // Show spinner and disable the upload button when upload starts
        function showSpinner() {
            $('#loadingSpinner').show(); // Display the spinner
            $('#uploadBtn').prop('disabled', true); // Disable the upload button
        };

        // Hide spinner and enable the upload button after the upload is complete
        function hideSpinner() {
            $('#loadingSpinner').hide(); // Hide the spinner
            $('#uploadBtn').prop('disabled', false); // Enable the upload button
        };

        $('#samplesheetbtn').on('click', function () {
            // Make AJAX call to download the sample sheet
            $.ajax({
                url: '/CustomerMaster/DownloadSampleSheet',  // The URL to your controller action
                type: 'GET',
                success: function (response) {
                    // Construct the full URL using the current site's base URL and the relative path
                    var fileUrl = window.location.origin + response.fileUrl;

                    // Create a link to trigger the download
                    var link = document.createElement('a');
                    link.href = fileUrl;  // Use the full URL of the file
                    link.download = 'Customer_Import_Format.xlsx';  // Specify the filename for the download
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                },
                error: function (xhr, status, error) {
                    console.error('Error downloading the sample sheet:', error);
                    alert('There was an error downloading the file. Please try again later.');
                }
            });
        });

    });

    // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
    function ShowErrorMsg(message) {
        Swal.fire({
            //title: 'Good job!',
            text: message,
            icon: 'success',
            customClass: {
                confirmButton: 'btn btn-primary waves-effect waves-light'
            },
            buttonsStyling: false
        });

    }

    function loadPageData(page, rowsToShow) {
        GetCustomerData(page, $('#ShowRowid').val());


    }
    // Function to update the Select All checkbox state based on individual checkbox selections
    function updateSelectAllCheckboxState() {
        var table = $("#CustomerMasterTable_Id");
        var allChecked = table.find(".RowCheckbox").length === table.find(".RowCheckbox:checked").length;
        table.find(".Checkbox_SelectAllHeader").prop('checked', allChecked);
    }

    var selectedRowIds = [];
    var SearchText;

    $(document).ready(function () {

        GetCustomerData(1, $('#ShowRowid').val());

        $(".Checkbox_SelectAllHeader").on("change", function () {
            var isChecked = $(this).prop('checked');  // Get the checked state of the header checkbox
            var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

            // Select or deselect all row checkboxes based on the header checkbox state
            table.find(".RowCheckbox").prop('checked', isChecked);

            // Update the selectedRowIds array based on the "Select All" checkbox
            if (isChecked) {
                // Add all row IDs to the selectedRowIds array for the specific table
                table.find(".RowCheckbox").each(function () {
                    var rowId = $(this).data('id');
                    if (rowId && !selectedRowIds.includes(rowId)) {
                        selectedRowIds.push(rowId);
                    }
                });
            } else {

                table.find(".RowCheckbox").each(function () {
                    var rowId = $(this).data('id');
                    if (rowId) {
                        // Only remove the rowId from the selectedRowIds array if the checkbox is unchecked
                        selectedRowIds = selectedRowIds.filter(function (id) {
                            return id !== rowId;
                        });
                    }
                });
            }
        });

        $(document).on("change", ".RowCheckbox", function () {
            var isChecked = $(this).prop('checked');  // Get the checked state of the checkbox
            var rowId = $(this).data('id');  // Get the row ID from data attribute
            var table = $(this).closest('table');  // Find the closest table to the clicked checkbox

            // Add or remove the row ID from the selectedRowIds array based on checkbox state
            if (isChecked) {
                if (!selectedRowIds.includes(rowId)) {
                    selectedRowIds.push(rowId);
                }
            } else {
                var index = selectedRowIds.indexOf(rowId);
                if (index !== -1) {
                    selectedRowIds.splice(index, 1);
                }
            }

            // Update the "Select All" checkbox state based on whether all checkboxes in the current table are checked
            updateSelectAllCheckboxState()


        });

        // THIS FUNCTION IS USED TO SHOW ERROR MESSAGE
        if ('@TempData["Message"]' !== "") {
            ShowErrorMsg('@TempData["Message"]');
        }
    @{
        TempData.Remove("Message");  // Remove specific key "Message" from TempData
    }


            function sendSelectedRowIds() {
                // Check if there are any selected row IDs
                var searchValue = SearchText;
                var rowIdsString = selectedRowIds.join(',');
                // Make an AJAX request to send the data to the controller action
                $.ajax({
                    type: "POST",
                    url: "/CustomerMaster/ExportdataExcelCustomers",
                    data: {
                        selectedRowIds: rowIdsString,
                        searchValue: searchValue
                    },
                    success: function (response) {

                        if (response.success) {
                            // Decode Base64 to binary string
                            var byteCharacters = atob(response.fileContent); // Decode Base64 to binary string
                            var byteArray = new Uint8Array(byteCharacters.length);

                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteArray[i] = byteCharacters.charCodeAt(i); // Convert to byte array
                            }

                            // Create a blob from the byte array
                            var blob = new Blob([byteArray], { type: response.fileType });

                            // Create a link element for downloading
                            var link = document.createElement('a');
                            link.href = URL.createObjectURL(blob);
                            link.download = response.fileName; // Set the download file name
                            link.click();
                        } else {
                            ShowErrorMsg(response.message)
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle the error (failure)
                        console.error('Error occurred while sending data to the server:', error);

                        // Optionally, display an error message
                        alert('An error occurred while processing your request.');
                    }
                });

            }


        $('#Btn_SearchCustomerNameId').on('click', function () {
            SearchText = $('#Txt_SearchInputCustomerName').val();
            GetCustomerData(1, $('#ShowRowid').val());
        });

        $("#Btn_ResetSearchCustomerId").on("click", function () {
            location.reload();
        });


        // EXPORT TO EXCEL BUTTON FUNCTIONALITY
        $("#Btn_ExportToExcelCustomerId").click(function () {

            sendSelectedRowIds();

        });
    });

    function EditCustomerId(id, Flag)
    //this function used for edit Customer    function EditCityId(id)
    {
        $.ajax({
            type: "POST",
            url: "/CustomerMaster/EditCustomer",
            data: {
                ID: id,
                Flag: Flag
            },
            success: function (data) {
                var res = JSON.parse(data);
                var CustomerData = res["CustomerData"]
                console.log(CustomerData);
                //console.log(CustomerData)
                var Flag = res["Flag"]
                console.log(Flag)
                if (Flag === "Show") {
                    $("#Btn_UpdateId").prop("disabled", false);
                }
                else {
                    $("#Btn_UpdateId").prop("disabled", true);
                }

                // $("#addProductModalLabel").text("Edit Country Details")
                document.getElementById('RecordId').value = CustomerData[0]["id"];
                document.getElementById('Update_TenantID').value = CustomerData[0]["tenant_id"];
                document.getElementById('UpdateTxt_CustomerNameId').value = CustomerData[0]["customer_name"];
                document.getElementById('UpdateTxt_MobileNumberId').value = CustomerData[0]["mobile_no"];
                document.getElementById('UpdateTxt_EmailId').value = CustomerData[0]["email_id"];
                document.getElementById('UpdateTxt_AddressId').value = CustomerData[0]["address"];
                document.getElementById('UpdateTxt_AreaId').value = CustomerData[0]["area_description"];
                document.getElementById('UpdateTxt_PincodeId').value = CustomerData[0]["pincode"];
                document.getElementById('UpdateTxt_Country').value = CustomerData[0]["country_id"];
                document.getElementById('Update_StateID').value = CustomerData[0]["state_id"];
                document.getElementById('Update_CityID').value = CustomerData[0]["city_id"];
                document.getElementById('UpdateTxt_RemarkId').value = CustomerData[0]["remark"];
                //THIS IS USED FOR CHECKED ACTIVE INACTIVE
                if (CustomerData[0]["is_active"] == "1") {
                    $("#UpdateRadioIsActive").prop("checked", true);
                } else {
                    $("#UpdateRadioIsDeactive").prop("checked", true);
                }

                $("#Btn_EditCustomer").click();

            },
            error: function (response) {
                console.log("error")

            }
        });
    }

    $('#Txt_MobileNumberId, #UpdateTxt_MobileNumberId').on("change paste", function () {

        const inputFieldId = $(this).attr('id'); // Get the ID of the field that triggered the event
        const value = $(this).val();

        $.ajax({
            type: "POST",
            url: "/CustomerMaster/CheckDuplicateRecord",
            data: {
                ColName: "mobile_no",
                Username: value
            },
            success: function (data) {
                if (data > 0) {
                    // Clear the field that triggered the event
                    $('#' + inputFieldId).val("");
                    console.log(inputFieldId);
                    // Show warning for the respective field
                    if (inputFieldId === "Txt_MobileNumberId") {
                        $("#WarnMobileId").css({ "display": "block", "color": "red" }).text("Mobile Number Already Exists...");
                    } else if (inputFieldId === "UpdateTxt_MobileNumberId") {
                        $("#UpdateWarnMobileId").css({ "display": "block", "color": "red" }).text("Mobile Number Already Exists...");
                    }
                } else {
                    $("#WarnMobileId").css({ "display": "none" });
                    $("#UpdateWarnMobileId").css({ "display": "none" });
                }
            },
            error: function (response) {
                console.error("Error during AJAX request:", response);
            }
        });
    });

    function ClearAllValue() {
        $("#Txt_CustomerNameId").val("");
        $("#Txt_MobileNumberId").val("");
        $("#Txt_EmailId").val("");
        $("#Txt_AddressId").val("");
        $("#Txt_AreaId").val("");
        $("#Txt_PincodeId").val("");
        $("#Select_CountryID").val("");
        $("#Select_StateID").val("");
        $("#Select_CityID").val("");
		$("#suggestions").empty();
		$("#suggestions1").empty();
		$("#suggestions2").empty();
        $("#Txt_RemarkId").val("");
        $("#UpdateWarnMobileId").css({ "display": "none" });
        $("#WarnMobileId").css({ "display": "none" });
    }

    // THIS FUNCTION IS USED TO SHOW HISTORY DETAILS
    function ShowHistory(id) {

        $.ajax({
            type: "POST",
            url: "/CustomerMaster/GetHistoryData",
            data: { id: id },
            success: function (data) {
                var res = JSON.parse(data);
                var HistoryData = res["HistoryData"];

                $("#customerHistorytable-id tbody").empty();


                if (HistoryData.length > 0) {

                    HistoryData.forEach(function (item) {
                        var row = '<tr>';
                        row += '<td>' + (item.action_name === 'A' ? 'Add' : item.action_name === 'U' ? 'Update' : 'Delete') + '</td>';
                        row += '<td>' + (item.tenant_name || '') + '</td>';
                        row += '<td>' + (item.customer_name || '') + '</td>';
                        row += '<td>' + (item.mobile_no || '') + '</td>';
                        row += '<td>' + (item.email_id || '') + '</td>';
                        // row += '<td>' + (item.address || '') + '</td>';
                        // row += '<td>' + (item.area_description || '') + '</td>';
                        // row += '<td>' + (item.pincode || '') + '</td>';
                        // row += '<td>' + (item.country_name || '') + '</td>';
                        // row += '<td>' + (item.state_name || '') + '</td>';
                        // row += '<td>' + (item.city_name || '') + '</td>';
                        row += '<td>' + (item.remark || '') + '</td>';
                        row += '<td>' + (item.is_active == '1' ? 'Active' : 'Deactive') + '</td>';
                        row += '<td>' + (item.ip_address || '') + '</td>';
                        // row += '<td>' + (item.created_at || '') + '</td>';
                        // row += '<td>' + (item.created_by || '') + '</td>';
                        row += '<td>' + (item.updated_at ? item.updated_at.replace('T', ' ') : '') + '</td>';
                        row += '<td>' + (item.updated_by || '') + '</td>';
                        row += '</tr>';

                        $("#customerHistorytable-id tbody").append(row); // Append row to table
                    });
                } else {
                    // If no data, show a message (optional)
                    $("#customerHistorytable-id tbody").append('<tr><td colspan="13" class="text-center">No history available</td></tr>');
                }
            },
            error: function (response) {
                console.error("Error during AJAX request:", response);
            }
        });
    }

    //this is for state dropdown
    // $('#Select_CountryID').on("change", function () {
    //     const countryId = $('#Select_CountryID').val();  // Get the selected CountryId
    //     console.log(countryId);

    //     if (countryId) {
    //         $.ajax({
    //             type: "POST",
    //             url: "/CustomerMaster/GetStateName",
    //             data: {
    //                 CountryId: countryId
    //             },
    //             success: function (response) {
    //                 // Parse the response (assuming the response is a JSON string)
    //                 var res = JSON.parse(response);  // Parse the JSON string
    //                 console.log(res);  // Log the parsed response

    //                 // Access the "Table" array from the response
    //                 var stateTable = res.Table;  // Access the "Table" array

    //                 // Check if the "Table" array has any items
    //                 if (stateTable && stateTable.length > 0) {
    //                     // Clear the state dropdown
    //                     $('#Select_StateID').empty();
    //                     $('#Select_StateID').append('<option value="">Select State</option>');

    //                     // Loop through the rows of the "Table" array and populate the dropdown
    //                     stateTable.forEach(function (row) {
    //                         // Append options to the dropdown with `id` as the value and `state_name` as the text
    //                         $('#Select_StateID').append(`<option value="${row.id}">${row.state_name}</option>`);
    //                     });
    //                 } else {
    //                     // If no states are available, append a "No states available" option
    //                     $('#Select_StateID').empty();
    //                     $('#Select_StateID').append('<option value="">No states available</option>');
    //                 }
    //             },
    //             error: function (response) {
    //                 console.error("Error during AJAX request:", response);
    //             }
    //         });
    //     } else {
    //         // If no country is selected, clear the state dropdown
    //         $('#Select_StateID').empty();
    //         $('#Select_StateID').append('<option value="">Select State</option>');
    //     }
    // });

    $('#UpdateTxt_Country').on("change", function () {
        const countryId = $('#UpdateTxt_Country').val();  // Get the selected CountryId
        console.log(countryId);

        if (countryId) {
            $.ajax({
                type: "POST",
                url: "/CustomerMaster/GetStateName",
                data: {
                    CountryId: countryId
                },
                success: function (response) {
                    // Parse the response (assuming the response is a JSON string)
                    var res = JSON.parse(response);  // Parse the JSON string
                    console.log(res);  // Log the parsed response

                    // Access the "Table" array from the response
                    var stateTable = res.Table;  // Access the "Table" array

                    // Check if the "Table" array has any items
                    if (stateTable && stateTable.length > 0) {
                        // Clear the state dropdown
                        $('#Update_StateID').empty();
                        $('#Update_StateID').append('<option value="">Select State</option>');

                        // Loop through the rows of the "Table" array and populate the dropdown
                        stateTable.forEach(function (row) {
                            // Append options to the dropdown with `id` as the value and `state_name` as the text
                            $('#Update_StateID').append(`<option value="${row.id}">${row.state_name}</option>`);
                        });
                    } else {
                        // If no states are available, append a "No states available" option
                        $('#Update_StateID').empty();
                        $('#Update_StateID').append('<option value="">No states available</option>');
                    }
                },
                error: function (response) {
                    console.error("Error during AJAX request:", response);
                }
            });
        } else {
            // If no country is selected, clear the state dropdown
            $('#Update_StateID').empty();
            $('#Update_StateID').append('<option value="">Select State</option>');
        }
    });

    // //this is for city dropdown
    // $('#Select_StateID').on("change", function () {
    //     const stateId = $('#Select_StateID').val();  // Get the selected CountryId
    //     console.log(stateId);

    //     if (stateId) {
    //         $.ajax({
    //             type: "POST",
    //             url: "/CustomerMaster/GetCityName",
    //             data: {
    //                 StateId: stateId
    //             },
    //             success: function (response) {

    //                 var res = JSON.parse(response);
    //                 console.log(res);

    //                 // Access the "Table" array from the response
    //                 var cityTable = res.Table;  // Access the "Table" array


    //                 if (cityTable && cityTable.length > 0) {

    //                     $('#Select_CityID').empty();
    //                     $('#Select_CityID').append('<option value="">Select City</option>');

    //                     cityTable.forEach(function (row) {

    //                         $('#Select_CityID').append(`<option value="${row.id}">${row.city_name}</option>`);
    //                     });
    //                 } else {

    //                     $('#Select_CityID').empty();
    //                     $('#Select_CityID').append('<option value="">No city available</option>');
    //                 }
    //             },
    //             error: function (response) {
    //                 console.error("Error during AJAX request:", response);
    //             }
    //         });
    //     } else {
    //         // If no country is selected, clear the city dropdown
    //         $('#Select_CityID').empty();
    //         $('#Select_CityID').append('<option value="">Select City</option>');
    //     }
    // });

    //this is for city dropdown
    // $('#Update_StateID').on("change", function () {
    //     const stateId = $('#Update_StateID').val();  // Get the selected CountryId
    //     console.log(stateId);

    //     if (stateId) {
    //         $.ajax({
    //             type: "POST",
    //             url: "/CustomerMaster/GetCityName",
    //             data: {
    //                 StateId: stateId
    //             },
    //             success: function (response) {

    //                 var res = JSON.parse(response);
    //                 console.log(res);

    //                 // Access the "Table" array from the response
    //                 var cityTable = res.Table;  // Access the "Table" array


    //                 if (cityTable && cityTable.length > 0) {

    //                     $('#Update_CityID').empty();
    //                     $('#Update_CityID').append('<option value="">Select City</option>');

    //                     cityTable.forEach(function (row) {

    //                         $('#Update_CityID').append(`<option value="${row.id}">${row.city_name}</option>`);
    //                     });
    //                 } else {

    //                     $('#Update_CityID').empty();
    //                     $('#Update_CityID').append('<option value="">No city available</option>');
    //                 }
    //             },
    //             error: function (response) {
    //                 console.error("Error during AJAX request:", response);
    //             }
    //         });
    //     } else {
    //         // If no country is selected, clear the city dropdown
    //         $('#Update_CityID').empty();
    //         $('#Update_CityID').append('<option value="">Select City</option>');
    //     }
    // });

    function GetCustomerData(pageNumber, pageSize) {
        const data = {
            PageNumber: pageNumber,
            PageSize: pageSize,
            SearchText: SearchText // Replace with the actual search text or global variable
        };

        $.ajax({
            type: "POST",
            url: "/CustomerMaster/GetCustomerData", // Replace with your backend endpoint
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (response) {
                const customerData = response.CustomerData;
                const paginationInfo = response.PaginationInfo;

                // Bind data to the table
                BindCustomerTableData(customerData, paginationInfo);
            },
            error: function (xhr, status, error) {
                console.error("Error fetching customer data:", xhr.responseText);

                $("#CustomerMasterTable_Id tbody").empty();
                $("#CustomerMasterTable_Id tbody").html(`
                    <tr>
                        <td colspan="15" style="text-align: center;">No Data Available</td>
                    </tr>
                `);
                generatePagination(1, $('#ShowRowid').val()); // Handle pagination for empty data
            }
        });
    }

    function BindCustomerTableData(res, paginationInfo) {
        $("#CustomerMasterTable_Id tbody").empty(); // Clear existing rows

        let srno;
        if (paginationInfo && paginationInfo.length > 0) {
            const totalRows = paginationInfo[0].TotalRows;
            const totalPages = paginationInfo[0].TotalPages;
            const pageNumber = paginationInfo[0].PageNumber;
            const pageSize = paginationInfo[0].PageSize;
            srno = (pageNumber - 1) * pageSize + 1;

            generatePagination(totalPages, pageNumber); // Generate pagination dynamically
        } else {
            console.error("PaginationInfo is missing or incorrect.");
        }

        if (Array.isArray(res) && res.length > 0) {
            res.forEach(item => {
                const customerId = item.id.toString();

                const isChecked = selectedRowIds.some(id => id.toString() === customerId);

                const data = `
                    <tr id="${item.id}">
                        <td>
                            <div class="form-check">
                                <input class="form-check-input RowCheckbox" type="checkbox" data-id="${item.id}" id="CustomerRowCheckBoxId_${item.id}" ${isChecked ? 'checked' : ''}>
                            </div>
                        </td>
                        <td>${srno}</td>
                        <td>
                            <div class="d-flex gap-2">
                                <div class="edit">
                                    <span class="btn btn-sm btn-success" style="margin:1px; cursor:pointer;" onclick="EditCustomerId(${item.id}, 'Show')" id="Btn_EditCustomerId">
                                        <i class="fa fa-edit"></i>
                                    </span>
                                </div>
                                    <div class="history">
                                                        <span class="btn btn-sm btn-warning" style="margin:1px; cursor:pointer;" title="History" data-bs-toggle="modal" data-bs-target="#HistoryModalcustomer" id="Btn_customerHistoryId" onclick="ShowHistory(${item.id})">
                                                    <i class="fas fa-history"></i>
                                                </span>
                                            </div>
                                                    </div>
                            </div>
                        </td>
                        <td>${item.tenant_name || ''}</td>
                        <td>${item.customer_name || ''}</td>
                        <td>${item.mobile_no || ''}</td>
                        <td>${item.email_id || ''}</td>
                        <td>${item.address || ''}</td>
                        <td>${item.area_description || ''}</td>
                        <td>${item.pincode || ''}</td>
                        <td>${item.country_name || ''}</td>
                        <td>${item.state_name || ''}</td>
                        <td>${item.city_name || ''}</td>
                        <td>${item.remark || ''}</td>
                        <td>${item.is_active === 1 ? "Active" : "Deactive"}</td>
                    </tr>
                `;

                $("#CustomerMasterTable_Id tbody").append(data);

                srno++;
            });
        } else {
            $("#CustomerMasterTable_Id tbody").html(`
                <tr>
                    <td colspan="15" style="text-align: center;">No Data Available</td>
                </tr>
            `);
        }

        updateSelectAllCheckboxState(); // Update the "Select All" checkbox state
    }


</script>
